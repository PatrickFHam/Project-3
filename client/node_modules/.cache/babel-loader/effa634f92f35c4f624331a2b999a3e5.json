{"ast":null,"code":"const $2fe286d2fb449abb$export$7a5acbd77d414bd9 = {\n  '001': 1,\n  AD: 1,\n  AE: 6,\n  AF: 6,\n  AI: 1,\n  AL: 1,\n  AM: 1,\n  AN: 1,\n  AT: 1,\n  AX: 1,\n  AZ: 1,\n  BA: 1,\n  BE: 1,\n  BG: 1,\n  BH: 6,\n  BM: 1,\n  BN: 1,\n  BY: 1,\n  CH: 1,\n  CL: 1,\n  CM: 1,\n  CR: 1,\n  CY: 1,\n  CZ: 1,\n  DE: 1,\n  DJ: 6,\n  DK: 1,\n  DZ: 6,\n  EC: 1,\n  EE: 1,\n  EG: 6,\n  ES: 1,\n  FI: 1,\n  FJ: 1,\n  FO: 1,\n  FR: 1,\n  GB: 1,\n  GE: 1,\n  GF: 1,\n  GP: 1,\n  GR: 1,\n  HR: 1,\n  HU: 1,\n  IE: 1,\n  IQ: 6,\n  IR: 6,\n  IS: 1,\n  IT: 1,\n  JO: 6,\n  KG: 1,\n  KW: 6,\n  KZ: 1,\n  LB: 1,\n  LI: 1,\n  LK: 1,\n  LT: 1,\n  LU: 1,\n  LV: 1,\n  LY: 6,\n  MC: 1,\n  MD: 1,\n  ME: 1,\n  MK: 1,\n  MN: 1,\n  MQ: 1,\n  MV: 5,\n  MY: 1,\n  NL: 1,\n  NO: 1,\n  NZ: 1,\n  OM: 6,\n  PL: 1,\n  QA: 6,\n  RE: 1,\n  RO: 1,\n  RS: 1,\n  RU: 1,\n  SD: 6,\n  SE: 1,\n  SI: 1,\n  SK: 1,\n  SM: 1,\n  SY: 6,\n  TJ: 1,\n  TM: 1,\n  TR: 1,\n  UA: 1,\n  UY: 1,\n  UZ: 1,\n  VA: 1,\n  VN: 1,\n  XK: 1\n};\n\nfunction $14e0f24ef4ac5c92$export$ea39ec197993aef0(a, b) {\n  b = $11d87f3f76e88657$export$b4a036af3fc0b032(b, a.calendar);\n  return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\nfunction $14e0f24ef4ac5c92$export$a18c89cbd24170ff(a, b) {\n  b = $11d87f3f76e88657$export$b4a036af3fc0b032(b, a.calendar); // In the Japanese calendar, months can span multiple eras/years, so only compare the first of the month.\n\n  a = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a);\n  b = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b);\n  return a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\nfunction $14e0f24ef4ac5c92$export$5841f9eb9773f25f(a, b) {\n  b = $11d87f3f76e88657$export$b4a036af3fc0b032(b, a.calendar);\n  a = $14e0f24ef4ac5c92$export$f91e89d3d0406102(a);\n  b = $14e0f24ef4ac5c92$export$f91e89d3d0406102(b);\n  return a.era === b.era && a.year === b.year;\n}\n\nfunction $14e0f24ef4ac5c92$export$91b62ebf2ba703ee(a, b) {\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\nfunction $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2(a, b) {\n  a = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a);\n  b = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\nfunction $14e0f24ef4ac5c92$export$ea840f5a6dda8147(a, b) {\n  a = $14e0f24ef4ac5c92$export$f91e89d3d0406102(a);\n  b = $14e0f24ef4ac5c92$export$f91e89d3d0406102(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year;\n}\n\nfunction $14e0f24ef4ac5c92$export$629b0a497aa65267(date, timeZone) {\n  return $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone));\n}\n\nfunction $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale) {\n  let julian = date.calendar.toJulianDay(date); // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n\n  let dayOfWeek = Math.ceil(julian + 1 - $14e0f24ef4ac5c92$var$getWeekStart(locale)) % 7;\n  if (dayOfWeek < 0) dayOfWeek += 7;\n  return dayOfWeek;\n}\n\nfunction $14e0f24ef4ac5c92$export$461939dd4422153(timeZone) {\n  return $11d87f3f76e88657$export$1b96692a1ba042ac(Date.now(), timeZone);\n}\n\nfunction $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone) {\n  return $11d87f3f76e88657$export$93522d1a439f3617($14e0f24ef4ac5c92$export$461939dd4422153(timeZone));\n}\n\nfunction $14e0f24ef4ac5c92$export$68781ddf31c0090f(a, b) {\n  return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);\n}\n\nfunction $14e0f24ef4ac5c92$export$c19a80a9721b80f6(a, b) {\n  return $14e0f24ef4ac5c92$var$timeToMs(a) - $14e0f24ef4ac5c92$var$timeToMs(b);\n}\n\nfunction $14e0f24ef4ac5c92$var$timeToMs(a) {\n  return a.hour * 3600000 + a.minute * 60000 + a.second * 1000 + a.millisecond;\n}\n\nfunction $14e0f24ef4ac5c92$export$126c91c941de7e(a, timeZone) {\n  let ms = $11d87f3f76e88657$export$5107c82f94518f5c(a, timeZone);\n  let tomorrow = a.add({\n    days: 1\n  });\n  let tomorrowMs = $11d87f3f76e88657$export$5107c82f94518f5c(tomorrow, timeZone);\n  return (tomorrowMs - ms) / 3600000;\n}\n\nlet $14e0f24ef4ac5c92$var$localTimeZone = null;\n\nfunction $14e0f24ef4ac5c92$export$aa8b41735afcabd2() {\n  // TODO: invalidate this somehow?\n  if ($14e0f24ef4ac5c92$var$localTimeZone == null) $14e0f24ef4ac5c92$var$localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  return $14e0f24ef4ac5c92$var$localTimeZone;\n}\n\nfunction $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date) {\n  // Use `subtract` instead of `set` so we don't get constrained in an era.\n  return date.subtract({\n    days: date.day - 1\n  });\n}\n\nfunction $14e0f24ef4ac5c92$export$a2258d9c4118825c(date) {\n  return date.add({\n    days: date.calendar.getDaysInMonth(date) - date.day\n  });\n}\n\nfunction $14e0f24ef4ac5c92$export$f91e89d3d0406102(date) {\n  return $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date.subtract({\n    months: date.month - 1\n  }));\n}\n\nfunction $14e0f24ef4ac5c92$export$8b7aa55c66d5569e(date) {\n  return $14e0f24ef4ac5c92$export$a2258d9c4118825c(date.add({\n    months: date.calendar.getMonthsInYear(date) - date.month\n  }));\n}\n\nfunction $14e0f24ef4ac5c92$export$5412ac11713b72ad(date) {\n  if (date.calendar.getMinimumMonthInYear) return date.calendar.getMinimumMonthInYear(date);\n  return 1;\n}\n\nfunction $14e0f24ef4ac5c92$export$b2f4953d301981d5(date) {\n  if (date.calendar.getMinimumDayInMonth) return date.calendar.getMinimumDayInMonth(date);\n  return 1;\n}\n\nfunction $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale) {\n  let dayOfWeek = $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale);\n  return date.subtract({\n    days: dayOfWeek\n  });\n}\n\nfunction $14e0f24ef4ac5c92$export$ef8b6d9133084f4e(date, locale) {\n  return $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale).add({\n    days: 6\n  });\n}\n\nconst $14e0f24ef4ac5c92$var$cachedRegions = new Map();\n\nfunction $14e0f24ef4ac5c92$var$getRegion(locale) {\n  // If the Intl.Locale API is available, use it to get the region for the locale.\n  // @ts-ignore\n  if (Intl.Locale) {\n    // Constructing an Intl.Locale is expensive, so cache the result.\n    let region = $14e0f24ef4ac5c92$var$cachedRegions.get(locale);\n\n    if (!region) {\n      // @ts-ignore\n      region = new Intl.Locale(locale).maximize().region;\n      $14e0f24ef4ac5c92$var$cachedRegions.set(locale, region);\n    }\n\n    return region;\n  } // If not, just try splitting the string.\n  // If the second part of the locale string is 'u',\n  // then this is a unicode extension, so ignore it.\n  // Otherwise, it should be the region.\n\n\n  let part = locale.split('-')[1];\n  return part === 'u' ? null : part;\n}\n\nfunction $14e0f24ef4ac5c92$var$getWeekStart(locale) {\n  // TODO: use Intl.Locale for this once browsers support the weekInfo property\n  // https://github.com/tc39/proposal-intl-locale-info\n  let region = $14e0f24ef4ac5c92$var$getRegion(locale);\n  return $2fe286d2fb449abb$export$7a5acbd77d414bd9[region] || 0;\n}\n\nfunction $14e0f24ef4ac5c92$export$ccc1b2479e7dd654(date, locale) {\n  let days = date.calendar.getDaysInMonth(date);\n  return Math.ceil(($14e0f24ef4ac5c92$export$2061056d06d7cdf7($14e0f24ef4ac5c92$export$a5a3b454ada2268e(date), locale) + days) / 7);\n}\n\nfunction $14e0f24ef4ac5c92$export$5c333a116e949cdd(a, b) {\n  if (a && b) return a.compare(b) <= 0 ? a : b;\n  return a || b;\n}\n\nfunction $14e0f24ef4ac5c92$export$a75f2bff57811055(a, b) {\n  if (a && b) return a.compare(b) >= 0 ? a : b;\n  return a || b;\n}\n\nconst $14e0f24ef4ac5c92$var$WEEKEND_DATA = {\n  AF: [4, 5],\n  AE: [5, 6],\n  BH: [5, 6],\n  DZ: [5, 6],\n  EG: [5, 6],\n  IL: [5, 6],\n  IQ: [5, 6],\n  IR: [5, 5],\n  JO: [5, 6],\n  KW: [5, 6],\n  LY: [5, 6],\n  OM: [5, 6],\n  QA: [5, 6],\n  SA: [5, 6],\n  SD: [5, 6],\n  SY: [5, 6],\n  YE: [5, 6]\n};\n\nfunction $14e0f24ef4ac5c92$export$618d60ea299da42(date, locale) {\n  let julian = date.calendar.toJulianDay(date); // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n\n  let dayOfWeek = Math.ceil(julian + 1) % 7;\n  if (dayOfWeek < 0) dayOfWeek += 7;\n  let region = $14e0f24ef4ac5c92$var$getRegion(locale); // Use Intl.Locale for this once weekInfo is supported.\n  // https://github.com/tc39/proposal-intl-locale-info\n\n  let [start, end] = $14e0f24ef4ac5c92$var$WEEKEND_DATA[region] || [6, 0];\n  return dayOfWeek === start || dayOfWeek === end;\n}\n\nfunction $14e0f24ef4ac5c92$export$ee9d87258e1d19ed(date, locale) {\n  return !$14e0f24ef4ac5c92$export$618d60ea299da42(date, locale);\n}\n\nfunction $2b4dce13dd5a17fa$export$842a2cf37af977e1(amount, numerator) {\n  return amount - numerator * Math.floor(amount / numerator);\n}\n\nfunction $2b4dce13dd5a17fa$export$784d13d8ee351f07(date) {\n  if (date.era) return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(date.calendar, date.era, date.year, date.month, date.day);else return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(date.calendar, date.year, date.month, date.day);\n}\n\nfunction $2b4dce13dd5a17fa$export$27fa0172ae2644b3(date) {\n  if (date.era) return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(date.calendar, date.era, date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);else return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(date.calendar, date.year, date.month, date.day, date.hour, date.minute, date.second);\n}\n\nconst $3b62074eb05584b2$var$EPOCH = 1721426; // 001/01/03 Julian C.E.\n\nfunction $3b62074eb05584b2$export$f297eb839006d339(era, year, month, day) {\n  year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year);\n  let y1 = year - 1;\n  let monthOffset = -2;\n  if (month <= 2) monthOffset = 0;else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) monthOffset = -1;\n  return $3b62074eb05584b2$var$EPOCH - 1 + 365 * y1 + Math.floor(y1 / 4) - Math.floor(y1 / 100) + Math.floor(y1 / 400) + Math.floor((367 * month - 362) / 12 + monthOffset + day);\n}\n\nfunction $3b62074eb05584b2$export$553d7fa8e3805fc0(year) {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\nfunction $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year) {\n  return era === 'BC' ? 1 - year : year;\n}\n\nfunction $3b62074eb05584b2$export$4475b7e617eb123c(year) {\n  let era = 'AD';\n\n  if (year <= 0) {\n    era = 'BC';\n    year = 1 - year;\n  }\n\n  return [era, year];\n}\n\nconst $3b62074eb05584b2$var$daysInMonth = {\n  standard: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  leapyear: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n};\n\nclass $3b62074eb05584b2$export$80ee6245ec4f29ec {\n  fromJulianDay(jd) {\n    let jd0 = jd;\n    let depoch = jd0 - $3b62074eb05584b2$var$EPOCH;\n    let quadricent = Math.floor(depoch / 146097);\n    let dqc = $2b4dce13dd5a17fa$export$842a2cf37af977e1(depoch, 146097);\n    let cent = Math.floor(dqc / 36524);\n    let dcent = $2b4dce13dd5a17fa$export$842a2cf37af977e1(dqc, 36524);\n    let quad = Math.floor(dcent / 1461);\n    let dquad = $2b4dce13dd5a17fa$export$842a2cf37af977e1(dcent, 1461);\n    let yindex = Math.floor(dquad / 365);\n    let extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);\n    let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c(extendedYear);\n    let yearDay = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, 1, 1);\n    let leapAdj = 2;\n    if (jd0 < $3b62074eb05584b2$export$f297eb839006d339(era, year, 3, 1)) leapAdj = 0;else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) leapAdj = 1;\n    let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);\n    let day = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, month, 1) + 1;\n    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(era, year, month, day);\n  }\n\n  toJulianDay(date) {\n    return $3b62074eb05584b2$export$f297eb839006d339(date.era, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date) {\n    return $3b62074eb05584b2$var$daysInMonth[$3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 'leapyear' : 'standard'][date.month - 1];\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  getMonthsInYear(date) {\n    return 12;\n  }\n\n  getDaysInYear(date) {\n    return $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 366 : 365;\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  getYearsInEra(date) {\n    return 9999;\n  }\n\n  getEras() {\n    return ['BC', 'AD'];\n  }\n\n  getYearsToAdd(date, years) {\n    return date.era === 'BC' ? -years : years;\n  }\n\n  balanceDate(date) {\n    if (date.year <= 0) {\n      date.era = date.era === 'BC' ? 'AD' : 'BC';\n      date.year = 1 - date.year;\n    }\n  }\n\n  constructor() {\n    this.identifier = 'gregory';\n  }\n\n}\n\nfunction $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) {\n  date = $11d87f3f76e88657$export$b4a036af3fc0b032(date, new $3b62074eb05584b2$export$80ee6245ec4f29ec());\n  return $11d87f3f76e88657$var$epochFromParts(date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n}\n\nfunction $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, millisecond) {\n  // Note: Date.UTC() interprets one and two-digit years as being in the\n  // 20th century, so don't use it\n  let date = new Date();\n  date.setUTCHours(hour, minute, second, millisecond);\n  date.setUTCFullYear(year, month - 1, day);\n  return date.getTime();\n}\n\nfunction $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone) {\n  // Fast path: for local timezone, use native Date.\n  if (timeZone === $14e0f24ef4ac5c92$export$aa8b41735afcabd2()) return new Date(ms).getTimezoneOffset() * -60000;\n  let {\n    year: year,\n    month: month,\n    day: day,\n    hour: hour,\n    minute: minute,\n    second: second\n  } = $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone);\n  let utc = $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, 0);\n  return utc - Math.floor(ms / 1000) * 1000;\n}\n\nconst $11d87f3f76e88657$var$formattersByTimeZone = new Map();\n\nfunction $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone) {\n  let formatter = $11d87f3f76e88657$var$formattersByTimeZone.get(timeZone);\n\n  if (!formatter) {\n    formatter = new Intl.DateTimeFormat('en-US', {\n      timeZone: timeZone,\n      hour12: false,\n      era: 'short',\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric'\n    });\n    $11d87f3f76e88657$var$formattersByTimeZone.set(timeZone, formatter);\n  }\n\n  let parts = formatter.formatToParts(new Date(ms));\n  let namedParts = {};\n\n  for (let part of parts) if (part.type !== 'literal') namedParts[part.type] = part.value;\n\n  return {\n    year: namedParts.era === 'BC' ? -namedParts.year + 1 : +namedParts.year,\n    month: +namedParts.month,\n    day: +namedParts.day,\n    hour: namedParts.hour === '24' ? 0 : +namedParts.hour,\n    minute: +namedParts.minute,\n    second: +namedParts.second\n  };\n}\n\nconst $11d87f3f76e88657$var$DAYMILLIS = 86400000;\n\nfunction $11d87f3f76e88657$export$136f38efe7caf549(date, timeZone) {\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date);\n  let earlier = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  let later = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  return $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later);\n}\n\nfunction $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later) {\n  let found = earlier === later ? [earlier] : [earlier, later];\n  return found.filter(absolute => $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute));\n}\n\nfunction $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute) {\n  let parts = $11d87f3f76e88657$var$getTimeZoneParts(absolute, timeZone);\n  return date.year === parts.year && date.month === parts.month && date.day === parts.day && date.hour === parts.hour && date.minute === parts.minute && date.second === parts.second;\n}\n\nfunction $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone) {\n  let disambiguation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'compatible';\n  let dateTime = $11d87f3f76e88657$export$b21e0b124e224484(date); // Fast path: if the time zone is the local timezone and disambiguation is compatible, use native Date.\n\n  if (timeZone === $14e0f24ef4ac5c92$export$aa8b41735afcabd2() && disambiguation === 'compatible') {\n    dateTime = $11d87f3f76e88657$export$b4a036af3fc0b032(dateTime, new $3b62074eb05584b2$export$80ee6245ec4f29ec()); // Don't use Date constructor here because two-digit years are interpreted in the 20th century.\n\n    let date = new Date();\n    date.setFullYear(dateTime.year, dateTime.month - 1, dateTime.day);\n    date.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n    return date.getTime();\n  }\n\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);\n  let offsetBefore = $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  let offsetAfter = $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  let valid = $11d87f3f76e88657$var$getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);\n  if (valid.length === 1) return valid[0];\n  if (valid.length > 1) switch (disambiguation) {\n    // 'compatible' means 'earlier' for \"fall back\" transitions\n    case 'compatible':\n    case 'earlier':\n      return valid[0];\n\n    case 'later':\n      return valid[valid.length - 1];\n\n    case 'reject':\n      throw new RangeError('Multiple possible absolute times found');\n  }\n\n  switch (disambiguation) {\n    case 'earlier':\n      return Math.min(ms - offsetBefore, ms - offsetAfter);\n    // 'compatible' means 'later' for \"spring forward\" transitions\n\n    case 'compatible':\n    case 'later':\n      return Math.max(ms - offsetBefore, ms - offsetAfter);\n\n    case 'reject':\n      throw new RangeError('No such absolute time found');\n  }\n}\n\nfunction $11d87f3f76e88657$export$e67a095c620b86fe(dateTime, timeZone) {\n  let disambiguation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'compatible';\n  return new Date($11d87f3f76e88657$export$5107c82f94518f5c(dateTime, timeZone, disambiguation));\n}\n\nfunction $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone) {\n  let offset = $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone);\n  let date = new Date(ms + offset);\n  let year = date.getUTCFullYear();\n  let month = date.getUTCMonth() + 1;\n  let day = date.getUTCDate();\n  let hour = date.getUTCHours();\n  let minute = date.getUTCMinutes();\n  let second = date.getUTCSeconds();\n  let millisecond = date.getUTCMilliseconds();\n  return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(year, month, day, timeZone, offset, hour, minute, second, millisecond);\n}\n\nfunction $11d87f3f76e88657$export$e57ff100d91bd4b9(date, timeZone) {\n  return $11d87f3f76e88657$export$1b96692a1ba042ac(date.getTime(), timeZone);\n}\n\nfunction $11d87f3f76e88657$export$d7f92bcd3596b086(date) {\n  return $11d87f3f76e88657$export$e57ff100d91bd4b9(date, $14e0f24ef4ac5c92$export$aa8b41735afcabd2());\n}\n\nfunction $11d87f3f76e88657$export$93522d1a439f3617(dateTime) {\n  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);\n}\n\nfunction $11d87f3f76e88657$export$6f4d78149f3f53ac(date) {\n  return {\n    era: date.era,\n    year: date.year,\n    month: date.month,\n    day: date.day\n  };\n}\n\nfunction $11d87f3f76e88657$export$4d0393e732857be5(date) {\n  return {\n    hour: date.hour,\n    minute: date.minute,\n    second: date.second,\n    millisecond: date.millisecond\n  };\n}\n\nfunction $11d87f3f76e88657$export$b21e0b124e224484(date, time) {\n  let hour = 0,\n      minute = 0,\n      second = 0,\n      millisecond = 0;\n  if ('timeZone' in date) ({\n    hour: hour,\n    minute: minute,\n    second: second,\n    millisecond: millisecond\n  } = date);else if ('hour' in date && !time) return date;\n  if (time) ({\n    hour: hour,\n    minute: minute,\n    second: second,\n    millisecond: millisecond\n  } = time);\n  return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(date.calendar, date.era, date.year, date.month, date.day, hour, minute, second, millisecond);\n}\n\nfunction $11d87f3f76e88657$export$d33f79e3ffc3dc83(dateTime) {\n  return new $35ea8db9cb2ccb90$export$680ea196effce5f(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n}\n\nfunction $11d87f3f76e88657$export$b4a036af3fc0b032(date, calendar) {\n  if (date.calendar.identifier === calendar.identifier) return date;\n  let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));\n  let copy = date.copy();\n  copy.calendar = calendar;\n  copy.era = calendarDate.era;\n  copy.year = calendarDate.year;\n  copy.month = calendarDate.month;\n  copy.day = calendarDate.day;\n  return copy;\n}\n\nfunction $11d87f3f76e88657$export$84c95a83c799e074(date, timeZone, disambiguation) {\n  if (date instanceof $35ea8db9cb2ccb90$export$d3b7288e7994edea) {\n    if (date.timeZone === timeZone) return date;\n    return $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone);\n  }\n\n  let ms = $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation);\n  return $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone);\n}\n\nfunction $11d87f3f76e88657$export$83aac07b4c37b25(date) {\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;\n  return new Date(ms);\n}\n\nfunction $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone) {\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;\n  return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone), date.calendar);\n}\n\nfunction $11d87f3f76e88657$export$d9b67bc93c097491(date) {\n  return $11d87f3f76e88657$export$538b00033cc11c75(date, $14e0f24ef4ac5c92$export$aa8b41735afcabd2());\n}\n\nconst $735220c2d4774dd3$var$ONE_HOUR = 3600000;\n\nfunction $735220c2d4774dd3$export$e16d8520af44a096(date, duration) {\n  let mutableDate = date.copy();\n  let days = 'hour' in date ? $735220c2d4774dd3$var$addTimeFields(date, duration) : 0;\n  $735220c2d4774dd3$var$addYears(mutableDate, duration.years || 0);\n  if (mutableDate.calendar.balanceYearMonth) mutableDate.calendar.balanceYearMonth(mutableDate, date);\n  mutableDate.month += duration.months || 0;\n  $735220c2d4774dd3$var$balanceYearMonth(mutableDate);\n  $735220c2d4774dd3$var$constrainMonthDay(mutableDate);\n  mutableDate.day += (duration.weeks || 0) * 7;\n  mutableDate.day += duration.days || 0;\n  mutableDate.day += days;\n  $735220c2d4774dd3$var$balanceDay(mutableDate);\n  if (mutableDate.calendar.balanceDate) mutableDate.calendar.balanceDate(mutableDate);\n  return mutableDate;\n}\n\nfunction $735220c2d4774dd3$var$addYears(date, years) {\n  if (date.calendar.getYearsToAdd) years = date.calendar.getYearsToAdd(date, years);\n  date.year += years;\n}\n\nfunction $735220c2d4774dd3$var$balanceYearMonth(date) {\n  while (date.month < 1) {\n    $735220c2d4774dd3$var$addYears(date, -1);\n    date.month += date.calendar.getMonthsInYear(date);\n  }\n\n  let monthsInYear = 0;\n\n  while (date.month > (monthsInYear = date.calendar.getMonthsInYear(date))) {\n    date.month -= monthsInYear;\n    $735220c2d4774dd3$var$addYears(date, 1);\n  }\n}\n\nfunction $735220c2d4774dd3$var$balanceDay(date) {\n  while (date.day < 1) {\n    date.month--;\n    $735220c2d4774dd3$var$balanceYearMonth(date);\n    date.day += date.calendar.getDaysInMonth(date);\n  }\n\n  while (date.day > date.calendar.getDaysInMonth(date)) {\n    date.day -= date.calendar.getDaysInMonth(date);\n    date.month++;\n    $735220c2d4774dd3$var$balanceYearMonth(date);\n  }\n}\n\nfunction $735220c2d4774dd3$var$constrainMonthDay(date) {\n  date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));\n  date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));\n}\n\nfunction $735220c2d4774dd3$export$c4e2ecac49351ef2(date) {\n  if (date.calendar.constrainDate) date.calendar.constrainDate(date);\n  date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));\n  $735220c2d4774dd3$var$constrainMonthDay(date);\n}\n\nfunction $735220c2d4774dd3$export$3e2544e88a25bff8(duration) {\n  let inverseDuration = {};\n\n  for (let key in duration) if (typeof duration[key] === 'number') inverseDuration[key] = -duration[key];\n\n  return inverseDuration;\n}\n\nfunction $735220c2d4774dd3$export$4e2d2ead65e5f7e3(date, duration) {\n  return $735220c2d4774dd3$export$e16d8520af44a096(date, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\n\nfunction $735220c2d4774dd3$export$adaa4cf7ef1b65be(date, fields) {\n  let mutableDate = date.copy();\n  if (fields.era != null) mutableDate.era = fields.era;\n  if (fields.year != null) mutableDate.year = fields.year;\n  if (fields.month != null) mutableDate.month = fields.month;\n  if (fields.day != null) mutableDate.day = fields.day;\n  $735220c2d4774dd3$export$c4e2ecac49351ef2(mutableDate);\n  return mutableDate;\n}\n\nfunction $735220c2d4774dd3$export$e5d5e1c1822b6e56(value, fields) {\n  let mutableValue = value.copy();\n  if (fields.hour != null) mutableValue.hour = fields.hour;\n  if (fields.minute != null) mutableValue.minute = fields.minute;\n  if (fields.second != null) mutableValue.second = fields.second;\n  if (fields.millisecond != null) mutableValue.millisecond = fields.millisecond;\n  $735220c2d4774dd3$export$7555de1e070510cb(mutableValue);\n  return mutableValue;\n}\n\nfunction $735220c2d4774dd3$var$balanceTime(time) {\n  time.second += Math.floor(time.millisecond / 1000);\n  time.millisecond = $735220c2d4774dd3$var$nonNegativeMod(time.millisecond, 1000);\n  time.minute += Math.floor(time.second / 60);\n  time.second = $735220c2d4774dd3$var$nonNegativeMod(time.second, 60);\n  time.hour += Math.floor(time.minute / 60);\n  time.minute = $735220c2d4774dd3$var$nonNegativeMod(time.minute, 60);\n  let days = Math.floor(time.hour / 24);\n  time.hour = $735220c2d4774dd3$var$nonNegativeMod(time.hour, 24);\n  return days;\n}\n\nfunction $735220c2d4774dd3$export$7555de1e070510cb(time) {\n  time.millisecond = Math.max(0, Math.min(time.millisecond, 1000));\n  time.second = Math.max(0, Math.min(time.second, 59));\n  time.minute = Math.max(0, Math.min(time.minute, 59));\n  time.hour = Math.max(0, Math.min(time.hour, 23));\n}\n\nfunction $735220c2d4774dd3$var$nonNegativeMod(a, b) {\n  let result = a % b;\n  if (result < 0) result += b;\n  return result;\n}\n\nfunction $735220c2d4774dd3$var$addTimeFields(time, duration) {\n  time.hour += duration.hours || 0;\n  time.minute += duration.minutes || 0;\n  time.second += duration.seconds || 0;\n  time.millisecond += duration.milliseconds || 0;\n  return $735220c2d4774dd3$var$balanceTime(time);\n}\n\nfunction $735220c2d4774dd3$export$7ed87b6bc2506470(time, duration) {\n  let res = time.copy();\n  $735220c2d4774dd3$var$addTimeFields(res, duration);\n  return res;\n}\n\nfunction $735220c2d4774dd3$export$fe34d3a381cd7501(time, duration) {\n  return $735220c2d4774dd3$export$7ed87b6bc2506470(time, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\n\nfunction $735220c2d4774dd3$export$d52ced6badfb9a4c(value, field, amount, options) {\n  let mutable = value.copy();\n\n  switch (field) {\n    case 'era':\n      {\n        let eras = value.calendar.getEras();\n        let eraIndex = eras.indexOf(value.era);\n        if (eraIndex < 0) throw new Error('Invalid era: ' + value.era);\n        eraIndex = $735220c2d4774dd3$var$cycleValue(eraIndex, amount, 0, eras.length - 1, options === null || options === void 0 ? void 0 : options.round);\n        mutable.era = eras[eraIndex]; // Constrain the year and other fields within the era, so the era doesn't change when we balance below.\n\n        $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);\n        break;\n      }\n\n    case 'year':\n      if (mutable.calendar.getYearsToAdd) amount = mutable.calendar.getYearsToAdd(mutable, amount); // The year field should not cycle within the era as that can cause weird behavior affecting other fields.\n      // We need to also allow values < 1 so that decrementing goes to the previous era. If we get -Infinity back\n      // we know we wrapped around after reaching 9999 (the maximum), so set the year back to 1.\n\n      mutable.year = $735220c2d4774dd3$var$cycleValue(value.year, amount, -Infinity, 9999, options === null || options === void 0 ? void 0 : options.round);\n      if (mutable.year === -Infinity) mutable.year = 1;\n      if (mutable.calendar.balanceYearMonth) mutable.calendar.balanceYearMonth(mutable, value);\n      break;\n\n    case 'month':\n      mutable.month = $735220c2d4774dd3$var$cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options === null || options === void 0 ? void 0 : options.round);\n      break;\n\n    case 'day':\n      mutable.day = $735220c2d4774dd3$var$cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options === null || options === void 0 ? void 0 : options.round);\n      break;\n\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n\n  if (value.calendar.balanceDate) value.calendar.balanceDate(mutable);\n  $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);\n  return mutable;\n}\n\nfunction $735220c2d4774dd3$export$dd02b3e0007dfe28(value, field, amount, options) {\n  let mutable = value.copy();\n\n  switch (field) {\n    case 'hour':\n      {\n        let hours = value.hour;\n        let min = 0;\n        let max = 23;\n\n        if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {\n          let isPM = hours >= 12;\n          min = isPM ? 12 : 0;\n          max = isPM ? 23 : 11;\n        }\n\n        mutable.hour = $735220c2d4774dd3$var$cycleValue(hours, amount, min, max, options === null || options === void 0 ? void 0 : options.round);\n        break;\n      }\n\n    case 'minute':\n      mutable.minute = $735220c2d4774dd3$var$cycleValue(value.minute, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);\n      break;\n\n    case 'second':\n      mutable.second = $735220c2d4774dd3$var$cycleValue(value.second, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);\n      break;\n\n    case 'millisecond':\n      mutable.millisecond = $735220c2d4774dd3$var$cycleValue(value.millisecond, amount, 0, 999, options === null || options === void 0 ? void 0 : options.round);\n      break;\n\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n\n  return mutable;\n}\n\nfunction $735220c2d4774dd3$var$cycleValue(value, amount, min, max) {\n  let round = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  if (round) {\n    value += Math.sign(amount);\n    if (value < min) value = max;\n    let div = Math.abs(amount);\n    if (amount > 0) value = Math.ceil(value / div) * div;else value = Math.floor(value / div) * div;\n    if (value > max) value = min;\n  } else {\n    value += amount;\n    if (value < min) value = max - (min - value - 1);else if (value > max) value = min + (value - max - 1);\n  }\n\n  return value;\n}\n\nfunction $735220c2d4774dd3$export$96b1d28349274637(dateTime, duration) {\n  let ms;\n\n  if (duration.years != null && duration.years !== 0 || duration.months != null && duration.months !== 0 || duration.days != null && duration.days !== 0) {\n    let res = $735220c2d4774dd3$export$e16d8520af44a096($11d87f3f76e88657$export$b21e0b124e224484(dateTime), {\n      years: duration.years,\n      months: duration.months,\n      days: duration.days\n    }); // Changing the date may change the timezone offset, so we need to recompute\n    // using the 'compatible' disambiguation.\n\n    ms = $11d87f3f76e88657$export$5107c82f94518f5c(res, dateTime.timeZone);\n  } else // Otherwise, preserve the offset of the original date.\n    ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime) - dateTime.offset; // Perform time manipulation in milliseconds rather than on the original time fields to account for DST.\n  // For example, adding one hour during a DST transition may result in the hour field staying the same or\n  // skipping an hour. This results in the offset field changing value instead of the specified field.\n\n\n  ms += duration.milliseconds || 0;\n  ms += (duration.seconds || 0) * 1000;\n  ms += (duration.minutes || 0) * 60000;\n  ms += (duration.hours || 0) * 3600000;\n  let res = $11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone);\n  return $11d87f3f76e88657$export$b4a036af3fc0b032(res, dateTime.calendar);\n}\n\nfunction $735220c2d4774dd3$export$6814caac34ca03c7(dateTime, duration) {\n  return $735220c2d4774dd3$export$96b1d28349274637(dateTime, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\n\nfunction $735220c2d4774dd3$export$9a297d111fc86b79(dateTime, field, amount, options) {\n  // For date fields, we want the time to remain consistent and the UTC offset to potentially change to account for DST changes.\n  // For time fields, we want the time to change by the amount given. This may result in the hour field staying the same, but the UTC\n  // offset changing in the case of a backward DST transition, or skipping an hour in the case of a forward DST transition.\n  switch (field) {\n    case 'hour':\n      {\n        let min = 0;\n        let max = 23;\n\n        if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {\n          let isPM = dateTime.hour >= 12;\n          min = isPM ? 12 : 0;\n          max = isPM ? 23 : 11;\n        } // The minimum and maximum hour may be affected by daylight saving time.\n        // For example, it might jump forward at midnight, and skip 1am.\n        // Or it might end at midnight and repeat the 11pm hour. To handle this, we get\n        // the possible absolute times for the min and max, and find the maximum range\n        // that is within the current day.\n\n\n        let plainDateTime = $11d87f3f76e88657$export$b21e0b124e224484(dateTime);\n        let minDate = $11d87f3f76e88657$export$b4a036af3fc0b032($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {\n          hour: min\n        }), new $3b62074eb05584b2$export$80ee6245ec4f29ec());\n        let minAbsolute = [$11d87f3f76e88657$export$5107c82f94518f5c(minDate, dateTime.timeZone, 'earlier'), $11d87f3f76e88657$export$5107c82f94518f5c(minDate, dateTime.timeZone, 'later')].filter(ms => $11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone).day === minDate.day)[0];\n        let maxDate = $11d87f3f76e88657$export$b4a036af3fc0b032($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {\n          hour: max\n        }), new $3b62074eb05584b2$export$80ee6245ec4f29ec());\n        let maxAbsolute = [$11d87f3f76e88657$export$5107c82f94518f5c(maxDate, dateTime.timeZone, 'earlier'), $11d87f3f76e88657$export$5107c82f94518f5c(maxDate, dateTime.timeZone, 'later')].filter(ms => $11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone).day === maxDate.day).pop(); // Since hours may repeat, we need to operate on the absolute time in milliseconds.\n        // This is done in hours from the Unix epoch so that cycleValue works correctly,\n        // and then converted back to milliseconds.\n\n        let ms1 = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime) - dateTime.offset;\n        let hours = Math.floor(ms1 / $735220c2d4774dd3$var$ONE_HOUR);\n        let remainder = ms1 % $735220c2d4774dd3$var$ONE_HOUR;\n        ms1 = $735220c2d4774dd3$var$cycleValue(hours, amount, Math.floor(minAbsolute / $735220c2d4774dd3$var$ONE_HOUR), Math.floor(maxAbsolute / $735220c2d4774dd3$var$ONE_HOUR), options === null || options === void 0 ? void 0 : options.round) * $735220c2d4774dd3$var$ONE_HOUR + remainder; // Now compute the new timezone offset, and convert the absolute time back to local time.\n\n        return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms1, dateTime.timeZone), dateTime.calendar);\n      }\n\n    case 'minute':\n    case 'second':\n    case 'millisecond':\n      // @ts-ignore\n      return $735220c2d4774dd3$export$dd02b3e0007dfe28(dateTime, field, amount, options);\n\n    case 'era':\n    case 'year':\n    case 'month':\n    case 'day':\n      {\n        let res = $735220c2d4774dd3$export$d52ced6badfb9a4c($11d87f3f76e88657$export$b21e0b124e224484(dateTime), field, amount, options);\n        let ms = $11d87f3f76e88657$export$5107c82f94518f5c(res, dateTime.timeZone);\n        return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone), dateTime.calendar);\n      }\n\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n}\n\nfunction $735220c2d4774dd3$export$31b5430eb18be4f8(dateTime, fields, disambiguation) {\n  // Set the date/time fields, and recompute the UTC offset to account for DST changes.\n  // We also need to validate by converting back to a local time in case hours are skipped during forward DST transitions.\n  let plainDateTime = $11d87f3f76e88657$export$b21e0b124e224484(dateTime);\n  let res = $735220c2d4774dd3$export$e5d5e1c1822b6e56($735220c2d4774dd3$export$adaa4cf7ef1b65be(plainDateTime, fields), fields); // If the resulting plain date time values are equal, return the original time.\n  // We don't want to change the offset when setting the time to the same value.\n\n  if (res.compare(plainDateTime) === 0) return dateTime;\n  let ms = $11d87f3f76e88657$export$5107c82f94518f5c(res, dateTime.timeZone, disambiguation);\n  return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone), dateTime.calendar);\n}\n\nconst $fae977aafc393c5c$var$TIME_RE = /^(\\d{2})(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst $fae977aafc393c5c$var$DATE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\nconst $fae977aafc393c5c$var$DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst $fae977aafc393c5c$var$ZONED_DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:([+-]\\d{2})(?::(\\d{2}))?)?\\[(.*?)\\]$/;\nconst $fae977aafc393c5c$var$ABSOLUTE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:(?:([+-]\\d{2})(?::(\\d{2}))?)|Z)$/;\n\nfunction $fae977aafc393c5c$export$c9698ec7f05a07e1(value) {\n  let m = value.match($fae977aafc393c5c$var$TIME_RE);\n  if (!m) throw new Error('Invalid ISO 8601 time string: ' + value);\n  return new $35ea8db9cb2ccb90$export$680ea196effce5f($fae977aafc393c5c$var$parseNumber(m[1], 0, 23), m[2] ? $fae977aafc393c5c$var$parseNumber(m[2], 0, 59) : 0, m[3] ? $fae977aafc393c5c$var$parseNumber(m[3], 0, 59) : 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, Infinity) * 1000 : 0);\n}\n\nfunction $fae977aafc393c5c$export$6b862160d295c8e(value) {\n  let m = value.match($fae977aafc393c5c$var$DATE_RE);\n  if (!m) throw new Error('Invalid ISO 8601 date string: ' + value);\n  let date = new $35ea8db9cb2ccb90$export$99faa760c7908e4f($fae977aafc393c5c$var$parseNumber(m[1], 0, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date;\n}\n\nfunction $fae977aafc393c5c$export$588937bcd60ade55(value) {\n  let m = value.match($fae977aafc393c5c$var$DATE_TIME_RE);\n  if (!m) throw new Error('Invalid ISO 8601 date time string: ' + value);\n  let date = new $35ea8db9cb2ccb90$export$ca871e8dbb80966f($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date;\n}\n\nfunction $fae977aafc393c5c$export$fd7893f06e92a6a4(value, disambiguation) {\n  let m = value.match($fae977aafc393c5c$var$ZONED_DATE_TIME_RE);\n  if (!m) throw new Error('Invalid ISO 8601 date time string: ' + value);\n  let date = new $35ea8db9cb2ccb90$export$d3b7288e7994edea($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[10], 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  let plainDateTime = $11d87f3f76e88657$export$b21e0b124e224484(date);\n  let ms;\n\n  if (m[8]) {\n    var ref;\n    date.offset = $fae977aafc393c5c$var$parseNumber(m[8], -23, 23) * 3600000 + $fae977aafc393c5c$var$parseNumber((ref = m[9]) !== null && ref !== void 0 ? ref : '0', 0, 59) * 60000;\n    ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset; // Validate offset against parsed date.\n\n    let absolutes = $11d87f3f76e88657$export$136f38efe7caf549(plainDateTime, date.timeZone);\n    if (!absolutes.includes(ms)) throw new Error(`Offset ${$fae977aafc393c5c$var$offsetToString(date.offset)} is invalid for ${$fae977aafc393c5c$export$4223de14708adc63(date)} in ${date.timeZone}`);\n  } else // Convert to absolute and back to fix invalid times due to DST.\n    ms = $11d87f3f76e88657$export$5107c82f94518f5c($11d87f3f76e88657$export$b21e0b124e224484(plainDateTime), date.timeZone, disambiguation);\n\n  return $11d87f3f76e88657$export$1b96692a1ba042ac(ms, date.timeZone);\n}\n\nfunction $fae977aafc393c5c$export$5adfdab05168c219(value, timeZone) {\n  let m = value.match($fae977aafc393c5c$var$ABSOLUTE_RE);\n  if (!m) throw new Error('Invalid ISO 8601 date time string: ' + value);\n  let date = new $35ea8db9cb2ccb90$export$d3b7288e7994edea($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, timeZone, 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  var ref;\n  if (m[8]) date.offset = $fae977aafc393c5c$var$parseNumber(m[8], -23, 23) * 3600000 + $fae977aafc393c5c$var$parseNumber((ref = m[9]) !== null && ref !== void 0 ? ref : '0', 0, 59) * 60000;\n  return $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone);\n}\n\nfunction $fae977aafc393c5c$export$8e384432362ed0f0(value) {\n  return $fae977aafc393c5c$export$5adfdab05168c219(value, $14e0f24ef4ac5c92$export$aa8b41735afcabd2());\n}\n\nfunction $fae977aafc393c5c$var$parseNumber(value, min, max) {\n  let val = Number(value);\n  if (val < min || val > max) throw new RangeError(`Value out of range: ${min} <= ${val} <= ${max}`);\n  return val;\n}\n\nfunction $fae977aafc393c5c$export$f59dee82248f5ad4(time) {\n  return `${String(time.hour).padStart(2, '0')}:${String(time.minute).padStart(2, '0')}:${String(time.second).padStart(2, '0')}${time.millisecond ? String(time.millisecond / 1000).slice(1) : ''}`;\n}\n\nfunction $fae977aafc393c5c$export$60dfd74aa96791bd(date) {\n  let gregorianDate = $11d87f3f76e88657$export$b4a036af3fc0b032(date, new $3b62074eb05584b2$export$80ee6245ec4f29ec());\n  return `${String(gregorianDate.year).padStart(4, '0')}-${String(gregorianDate.month).padStart(2, '0')}-${String(gregorianDate.day).padStart(2, '0')}`;\n}\n\nfunction $fae977aafc393c5c$export$4223de14708adc63(date) {\n  // @ts-ignore\n  return `${$fae977aafc393c5c$export$60dfd74aa96791bd(date)}T${$fae977aafc393c5c$export$f59dee82248f5ad4(date)}`;\n}\n\nfunction $fae977aafc393c5c$var$offsetToString(offset) {\n  let sign = Math.sign(offset) < 0 ? '-' : '+';\n  offset = Math.abs(offset);\n  let offsetHours = Math.floor(offset / 3600000);\n  let offsetMinutes = offset % 3600000 / 60000;\n  return `${sign}${String(offsetHours).padStart(2, '0')}:${String(offsetMinutes).padStart(2, '0')}`;\n}\n\nfunction $fae977aafc393c5c$export$bf79f1ebf4b18792(date) {\n  return `${$fae977aafc393c5c$export$4223de14708adc63(date)}${$fae977aafc393c5c$var$offsetToString(date.offset)}[${date.timeZone}]`;\n}\n\nfunction $35ea8db9cb2ccb90$var$shiftArgs(args) {\n  let calendar = typeof args[0] === 'object' ? args.shift() : new $3b62074eb05584b2$export$80ee6245ec4f29ec();\n  let era;\n  if (typeof args[0] === 'string') era = args.shift();else {\n    let eras = calendar.getEras();\n    era = eras[eras.length - 1];\n  }\n  let year = args.shift();\n  let month = args.shift();\n  let day = args.shift();\n  return [calendar, era, year, month, day];\n}\n\nclass $35ea8db9cb2ccb90$export$99faa760c7908e4f {\n  /** Returns a copy of this date. */\n  copy() {\n    if (this.era) return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.era, this.year, this.month, this.day);else return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.year, this.month, this.day);\n  }\n  /** Returns a new `CalendarDate` with the given duration added to it. */\n\n\n  add(duration) {\n    return $735220c2d4774dd3$export$e16d8520af44a096(this, duration);\n  }\n  /** Returns a new `CalendarDate` with the given duration subtracted from it. */\n\n\n  subtract(duration) {\n    return $735220c2d4774dd3$export$4e2d2ead65e5f7e3(this, duration);\n  }\n  /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n\n\n  set(fields) {\n    return $735220c2d4774dd3$export$adaa4cf7ef1b65be(this, fields);\n  }\n  /**\n  * Returns a new `CalendarDate` with the given field adjusted by a specified amount.\n  * When the resulting value reaches the limits of the field, it wraps around.\n  */\n\n\n  cycle(field, amount, options) {\n    return $735220c2d4774dd3$export$d52ced6badfb9a4c(this, field, amount, options);\n  }\n  /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */\n\n\n  toDate(timeZone) {\n    return $11d87f3f76e88657$export$e67a095c620b86fe(this, timeZone);\n  }\n  /** Converts the date to an ISO 8601 formatted string. */\n\n\n  toString() {\n    return $fae977aafc393c5c$export$60dfd74aa96791bd(this);\n  }\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n\n\n  compare(b) {\n    return $14e0f24ef4ac5c92$export$68781ddf31c0090f(this, b);\n  }\n\n  constructor() {\n    // This prevents TypeScript from allowing other types with the same fields to match.\n    // i.e. a ZonedDateTime should not be be passable to a parameter that expects CalendarDate.\n    // If that behavior is desired, use the AnyCalendarDate interface instead.\n    _type.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    $735220c2d4774dd3$export$c4e2ecac49351ef2(this);\n  }\n\n}\n\nvar _type = new WeakMap();\n\nclass $35ea8db9cb2ccb90$export$680ea196effce5f {\n  /** Returns a copy of this time. */\n  copy() {\n    return new $35ea8db9cb2ccb90$export$680ea196effce5f(this.hour, this.minute, this.second, this.millisecond);\n  }\n  /** Returns a new `Time` with the given duration added to it. */\n\n\n  add(duration) {\n    return $735220c2d4774dd3$export$7ed87b6bc2506470(this, duration);\n  }\n  /** Returns a new `Time` with the given duration subtracted from it. */\n\n\n  subtract(duration) {\n    return $735220c2d4774dd3$export$fe34d3a381cd7501(this, duration);\n  }\n  /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n\n\n  set(fields) {\n    return $735220c2d4774dd3$export$e5d5e1c1822b6e56(this, fields);\n  }\n  /**\n  * Returns a new `Time` with the given field adjusted by a specified amount.\n  * When the resulting value reaches the limits of the field, it wraps around.\n  */\n\n\n  cycle(field, amount, options) {\n    return $735220c2d4774dd3$export$dd02b3e0007dfe28(this, field, amount, options);\n  }\n  /** Converts the time to an ISO 8601 formatted string. */\n\n\n  toString() {\n    return $fae977aafc393c5c$export$f59dee82248f5ad4(this);\n  }\n  /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */\n\n\n  compare(b) {\n    return $14e0f24ef4ac5c92$export$c19a80a9721b80f6(this, b);\n  }\n\n  constructor() {\n    let hour = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let minute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let second = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let millisecond = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    // This prevents TypeScript from allowing other types with the same fields to match.\n    _type1.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    this.hour = hour;\n    this.minute = minute;\n    this.second = second;\n    this.millisecond = millisecond;\n    $735220c2d4774dd3$export$7555de1e070510cb(this);\n  }\n\n}\n\nvar _type1 = new WeakMap();\n\nclass $35ea8db9cb2ccb90$export$ca871e8dbb80966f {\n  /** Returns a copy of this date. */\n  copy() {\n    if (this.era) return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);else return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n  }\n  /** Returns a new `CalendarDateTime` with the given duration added to it. */\n\n\n  add(duration) {\n    return $735220c2d4774dd3$export$e16d8520af44a096(this, duration);\n  }\n  /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */\n\n\n  subtract(duration) {\n    return $735220c2d4774dd3$export$4e2d2ead65e5f7e3(this, duration);\n  }\n  /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n\n\n  set(fields) {\n    return $735220c2d4774dd3$export$adaa4cf7ef1b65be($735220c2d4774dd3$export$e5d5e1c1822b6e56(this, fields), fields);\n  }\n  /**\n  * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\n  * When the resulting value reaches the limits of the field, it wraps around.\n  */\n\n\n  cycle(field, amount, options) {\n    switch (field) {\n      case 'era':\n      case 'year':\n      case 'month':\n      case 'day':\n        return $735220c2d4774dd3$export$d52ced6badfb9a4c(this, field, amount, options);\n\n      default:\n        return $735220c2d4774dd3$export$dd02b3e0007dfe28(this, field, amount, options);\n    }\n  }\n  /** Converts the date to a native JavaScript Date object in the given time zone. */\n\n\n  toDate(timeZone, disambiguation) {\n    return $11d87f3f76e88657$export$e67a095c620b86fe(this, timeZone, disambiguation);\n  }\n  /** Converts the date to an ISO 8601 formatted string. */\n\n\n  toString() {\n    return $fae977aafc393c5c$export$4223de14708adc63(this);\n  }\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n\n\n  compare(b) {\n    let res = $14e0f24ef4ac5c92$export$68781ddf31c0090f(this, b);\n    if (res === 0) return $14e0f24ef4ac5c92$export$c19a80a9721b80f6(this, $11d87f3f76e88657$export$b21e0b124e224484(b));\n    return res;\n  }\n\n  constructor() {\n    // This prevents TypeScript from allowing other types with the same fields to match.\n    _type2.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n    $735220c2d4774dd3$export$c4e2ecac49351ef2(this);\n  }\n\n}\n\nvar _type2 = new WeakMap();\n\nclass $35ea8db9cb2ccb90$export$d3b7288e7994edea {\n  /** Returns a copy of this date. */\n  copy() {\n    if (this.era) return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);else return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n  }\n  /** Returns a new `ZonedDateTime` with the given duration added to it. */\n\n\n  add(duration) {\n    return $735220c2d4774dd3$export$96b1d28349274637(this, duration);\n  }\n  /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */\n\n\n  subtract(duration) {\n    return $735220c2d4774dd3$export$6814caac34ca03c7(this, duration);\n  }\n  /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n\n\n  set(fields, disambiguation) {\n    return $735220c2d4774dd3$export$31b5430eb18be4f8(this, fields, disambiguation);\n  }\n  /**\n  * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\n  * When the resulting value reaches the limits of the field, it wraps around.\n  */\n\n\n  cycle(field, amount, options) {\n    return $735220c2d4774dd3$export$9a297d111fc86b79(this, field, amount, options);\n  }\n  /** Converts the date to a native JavaScript Date object. */\n\n\n  toDate() {\n    return $11d87f3f76e88657$export$83aac07b4c37b25(this);\n  }\n  /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */\n\n\n  toString() {\n    return $fae977aafc393c5c$export$bf79f1ebf4b18792(this);\n  }\n  /** Converts the date to an ISO 8601 formatted string in UTC. */\n\n\n  toAbsoluteString() {\n    return this.toDate().toISOString();\n  }\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n\n\n  compare(b) {\n    // TODO: Is this a bad idea??\n    return this.toDate().getTime() - $11d87f3f76e88657$export$84c95a83c799e074(b, this.timeZone).toDate().getTime();\n  }\n\n  constructor() {\n    // This prevents TypeScript from allowing other types with the same fields to match.\n    _type3.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);\n    let timeZone = args.shift();\n    let offset = args.shift();\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.timeZone = timeZone;\n    this.offset = offset;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n    $735220c2d4774dd3$export$c4e2ecac49351ef2(this);\n  }\n\n}\n\nvar _type3 = new WeakMap();\n\nconst $62225008020f0a13$var$ERA_START_DATES = [[1868, 9, 8], [1912, 7, 30], [1926, 12, 25], [1989, 1, 8], [2019, 5, 1]];\nconst $62225008020f0a13$var$ERA_END_DATES = [[1912, 7, 29], [1926, 12, 24], [1989, 1, 7], [2019, 4, 30]];\nconst $62225008020f0a13$var$ERA_ADDENDS = [1867, 1911, 1925, 1988, 2018];\nconst $62225008020f0a13$var$ERA_NAMES = ['meiji', 'taisho', 'showa', 'heisei', 'reiwa'];\n\nfunction $62225008020f0a13$var$findEraFromGregorianDate(date) {\n  const idx = $62225008020f0a13$var$ERA_START_DATES.findIndex(_ref => {\n    let [year, month, day] = _ref;\n    if (date.year < year) return true;\n    if (date.year === year && date.month < month) return true;\n    if (date.year === year && date.month === month && date.day < day) return true;\n    return false;\n  });\n  if (idx === -1) return $62225008020f0a13$var$ERA_START_DATES.length - 1;\n  if (idx === 0) return 0;\n  return idx - 1;\n}\n\nfunction $62225008020f0a13$var$toGregorian(date) {\n  let eraAddend = $62225008020f0a13$var$ERA_ADDENDS[$62225008020f0a13$var$ERA_NAMES.indexOf(date.era)];\n  if (!eraAddend) throw new Error('Unknown era: ' + date.era);\n  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(date.year + eraAddend, date.month, date.day);\n}\n\nclass $62225008020f0a13$export$b746ab2b60cdffbf extends $3b62074eb05584b2$export$80ee6245ec4f29ec {\n  fromJulianDay(jd) {\n    let date = super.fromJulianDay(jd);\n    let era = $62225008020f0a13$var$findEraFromGregorianDate(date);\n    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, $62225008020f0a13$var$ERA_NAMES[era], date.year - $62225008020f0a13$var$ERA_ADDENDS[era], date.month, date.day);\n  }\n\n  toJulianDay(date) {\n    return super.toJulianDay($62225008020f0a13$var$toGregorian(date));\n  }\n\n  balanceDate(date) {\n    let gregorianDate = $62225008020f0a13$var$toGregorian(date);\n    let era = $62225008020f0a13$var$findEraFromGregorianDate(gregorianDate);\n\n    if ($62225008020f0a13$var$ERA_NAMES[era] !== date.era) {\n      date.era = $62225008020f0a13$var$ERA_NAMES[era];\n      date.year = gregorianDate.year - $62225008020f0a13$var$ERA_ADDENDS[era];\n    } // Constrain in case we went before the first supported era.\n\n\n    this.constrainDate(date);\n  }\n\n  constrainDate(date) {\n    let idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n    let end = $62225008020f0a13$var$ERA_END_DATES[idx];\n\n    if (end != null) {\n      let [endYear, endMonth, endDay] = end; // Constrain the year to the maximum possible value in the era.\n      // Then constrain the month and day fields within that.\n\n      let maxYear = endYear - $62225008020f0a13$var$ERA_ADDENDS[idx];\n      date.year = Math.max(1, Math.min(maxYear, date.year));\n\n      if (date.year === maxYear) {\n        date.month = Math.min(endMonth, date.month);\n        if (date.month === endMonth) date.day = Math.min(endDay, date.day);\n      }\n\n      if (date.year === 1) {\n        let [, startMonth, startDay] = $62225008020f0a13$var$ERA_START_DATES[idx];\n        date.month = Math.max(startMonth, date.month);\n        if (date.month === startMonth) date.day = Math.max(startDay, date.day);\n      }\n    }\n  }\n\n  getEras() {\n    return $62225008020f0a13$var$ERA_NAMES;\n  }\n\n  getYearsInEra(date) {\n    // Get the number of years in the era, taking into account the date's month and day fields.\n    let era = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n    let next = $62225008020f0a13$var$ERA_START_DATES[era + 1];\n    if (next == null) return 9999;\n    let cur = $62225008020f0a13$var$ERA_START_DATES[era];\n    let years = next[0] - cur[0];\n    if (date.month < next[1] || date.month === next[1] && date.day < next[2]) years++;\n    return years;\n  }\n\n  getDaysInMonth(date) {\n    return super.getDaysInMonth($62225008020f0a13$var$toGregorian(date));\n  }\n\n  getMinimumMonthInYear(date) {\n    let start = $62225008020f0a13$var$getMinimums(date);\n    return start ? start[1] : 1;\n  }\n\n  getMinimumDayInMonth(date) {\n    let start = $62225008020f0a13$var$getMinimums(date);\n    return start && date.month === start[1] ? start[2] : 1;\n  }\n\n  constructor() {\n    super(...arguments);\n    this.identifier = 'japanese';\n  }\n\n}\n\nfunction $62225008020f0a13$var$getMinimums(date) {\n  if (date.year === 1) {\n    let idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n    return $62225008020f0a13$var$ERA_START_DATES[idx];\n  }\n}\n\nconst $8d73d47422ca7302$var$BUDDHIST_ERA_START = -543;\n\nclass $8d73d47422ca7302$export$42d20a78301dee44 extends $3b62074eb05584b2$export$80ee6245ec4f29ec {\n  fromJulianDay(jd) {\n    let gregorianDate = super.fromJulianDay(jd);\n    let year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(gregorianDate.era, gregorianDate.year);\n    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, year - $8d73d47422ca7302$var$BUDDHIST_ERA_START, gregorianDate.month, gregorianDate.day);\n  }\n\n  toJulianDay(date) {\n    return super.toJulianDay($8d73d47422ca7302$var$toGregorian(date));\n  }\n\n  getEras() {\n    return ['BE'];\n  }\n\n  getDaysInMonth(date) {\n    return super.getDaysInMonth($8d73d47422ca7302$var$toGregorian(date));\n  }\n\n  constructor() {\n    super(...arguments);\n    this.identifier = 'buddhist';\n  }\n\n}\n\nfunction $8d73d47422ca7302$var$toGregorian(date) {\n  let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c(date.year + $8d73d47422ca7302$var$BUDDHIST_ERA_START);\n  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(era, year, date.month, date.day);\n}\n\nconst $5f31bd6f0c8940b2$var$TAIWAN_ERA_START = 1911;\n\nfunction $5f31bd6f0c8940b2$var$gregorianYear(date) {\n  return date.era === 'minguo' ? date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START : 1 - date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n}\n\nfunction $5f31bd6f0c8940b2$var$gregorianToTaiwan(year) {\n  let y = year - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n  if (y > 0) return ['minguo', y];else return ['before_minguo', 1 - y];\n}\n\nclass $5f31bd6f0c8940b2$export$65e01080afcb0799 extends $3b62074eb05584b2$export$80ee6245ec4f29ec {\n  fromJulianDay(jd) {\n    let date = super.fromJulianDay(jd);\n    let extendedYear = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(date.era, date.year);\n    let [era, year] = $5f31bd6f0c8940b2$var$gregorianToTaiwan(extendedYear);\n    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, era, year, date.month, date.day);\n  }\n\n  toJulianDay(date) {\n    return super.toJulianDay($5f31bd6f0c8940b2$var$toGregorian(date));\n  }\n\n  getEras() {\n    return ['before_minguo', 'minguo'];\n  }\n\n  balanceDate(date) {\n    let [era, year] = $5f31bd6f0c8940b2$var$gregorianToTaiwan($5f31bd6f0c8940b2$var$gregorianYear(date));\n    date.era = era;\n    date.year = year;\n  }\n\n  getYearsToAdd(date, years) {\n    return date.era === 'before_minguo' ? -years : years;\n  }\n\n  getDaysInMonth(date) {\n    return super.getDaysInMonth($5f31bd6f0c8940b2$var$toGregorian(date));\n  }\n\n  constructor() {\n    super(...arguments);\n    this.identifier // Republic of China\n    = 'roc';\n  }\n\n}\n\nfunction $5f31bd6f0c8940b2$var$toGregorian(date) {\n  let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c($5f31bd6f0c8940b2$var$gregorianYear(date));\n  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(era, year, date.month, date.day);\n}\n\nconst $f3ed2e4472ae7e25$var$PERSIAN_EPOCH = 1948321; // 622/03/19 Julian C.E.\n\nfunction $f3ed2e4472ae7e25$var$isLeapYear(year) {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = $2b4dce13dd5a17fa$export$842a2cf37af977e1(y0, 2820) + 474;\n  return $2b4dce13dd5a17fa$export$842a2cf37af977e1((y1 + 38) * 31, 128) < 31;\n}\n\nfunction $f3ed2e4472ae7e25$var$persianToJulianDay(year, month, day) {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = $2b4dce13dd5a17fa$export$842a2cf37af977e1(y0, 2820) + 474;\n  let offset = month <= 7 ? 31 * (month - 1) : 30 * (month - 1) + 6;\n  return $f3ed2e4472ae7e25$var$PERSIAN_EPOCH - 1 + 1029983 * Math.floor(y0 / 2820) + 365 * (y1 - 1) + Math.floor((31 * y1 - 5) / 128) + offset + day;\n}\n\nclass $f3ed2e4472ae7e25$export$37fccdbfd14c5939 {\n  fromJulianDay(jd) {\n    let d0 = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(475, 1, 1);\n    let n2820 = Math.floor(d0 / 1029983);\n    let d1 = $2b4dce13dd5a17fa$export$842a2cf37af977e1(d0, 1029983);\n    let y2820 = d1 === 1029982 ? 2820 : Math.floor((128 * d1 + 46878) / 46751);\n    let year = 474 + 2820 * n2820 + y2820;\n    if (year <= 0) year--;\n    let yDay = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(year, 1, 1) + 1;\n    let month = yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 31);\n    let day = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(year, month, 1) + 1;\n    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, year, month, day);\n  }\n\n  toJulianDay(date) {\n    return $f3ed2e4472ae7e25$var$persianToJulianDay(date.year, date.month, date.day);\n  }\n\n  getMonthsInYear() {\n    return 12;\n  }\n\n  getDaysInMonth(date) {\n    if (date.month <= 6) return 31;\n    if (date.month <= 11) return 30;\n    return $f3ed2e4472ae7e25$var$isLeapYear(date.year) ? 30 : 29;\n  }\n\n  getEras() {\n    return ['AP'];\n  }\n\n  getYearsInEra() {\n    return 9999;\n  }\n\n  constructor() {\n    this.identifier = 'persian';\n  }\n\n} // Starts in 78 AD,\n\n\nconst $82c358003bdda0a8$var$INDIAN_ERA_START = 78; // The Indian year starts 80 days later than the Gregorian year.\n\nconst $82c358003bdda0a8$var$INDIAN_YEAR_START = 80;\n\nclass $82c358003bdda0a8$export$39f31c639fa15726 extends $3b62074eb05584b2$export$80ee6245ec4f29ec {\n  fromJulianDay(jd) {\n    // Gregorian date for Julian day\n    let date = super.fromJulianDay(jd); // Year in Saka era\n\n    let indianYear = date.year - $82c358003bdda0a8$var$INDIAN_ERA_START; // Day number in Gregorian year (starting from 0)\n\n    let yDay = jd - $3b62074eb05584b2$export$f297eb839006d339(date.era, date.year, 1, 1);\n    let leapMonth;\n\n    if (yDay < $82c358003bdda0a8$var$INDIAN_YEAR_START) {\n      //  Day is at the end of the preceding Saka year\n      indianYear--; // Days in leapMonth this year, previous Gregorian year\n\n      leapMonth = $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year - 1) ? 31 : 30;\n      yDay += leapMonth + 155 + 90 + 10;\n    } else {\n      // Days in leapMonth this year\n      leapMonth = $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 31 : 30;\n      yDay -= $82c358003bdda0a8$var$INDIAN_YEAR_START;\n    }\n\n    let indianMonth;\n    let indianDay;\n\n    if (yDay < leapMonth) {\n      indianMonth = 1;\n      indianDay = yDay + 1;\n    } else {\n      let mDay = yDay - leapMonth;\n\n      if (mDay < 155) {\n        indianMonth = Math.floor(mDay / 31) + 2;\n        indianDay = mDay % 31 + 1;\n      } else {\n        mDay -= 155;\n        indianMonth = Math.floor(mDay / 30) + 7;\n        indianDay = mDay % 30 + 1;\n      }\n    }\n\n    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, indianYear, indianMonth, indianDay);\n  }\n\n  toJulianDay(date) {\n    let extendedYear = date.year + $82c358003bdda0a8$var$INDIAN_ERA_START;\n    let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c(extendedYear);\n    let leapMonth;\n    let jd;\n\n    if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) {\n      leapMonth = 31;\n      jd = $3b62074eb05584b2$export$f297eb839006d339(era, year, 3, 21);\n    } else {\n      leapMonth = 30;\n      jd = $3b62074eb05584b2$export$f297eb839006d339(era, year, 3, 22);\n    }\n\n    if (date.month === 1) return jd + date.day - 1;\n    jd += leapMonth + Math.min(date.month - 2, 5) * 31;\n    if (date.month >= 8) jd += (date.month - 7) * 30;\n    jd += date.day - 1;\n    return jd;\n  }\n\n  getDaysInMonth(date) {\n    if (date.month === 1 && $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year + $82c358003bdda0a8$var$INDIAN_ERA_START)) return 31;\n    if (date.month >= 2 && date.month <= 6) return 31;\n    return 30;\n  }\n\n  getYearsInEra() {\n    return 9999;\n  }\n\n  getEras() {\n    return ['saka'];\n  }\n\n  constructor() {\n    super(...arguments);\n    this.identifier = 'indian';\n  }\n\n}\n\nconst $f2f3e0e3a817edbd$var$CIVIL_EPOC = 1948440; // CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)\n\nconst $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC = 1948439; // CE 622 July 15 Thursday (Julian calendar)\n\nconst $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START = 1300;\nconst $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END = 1600;\nconst $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS = 460322;\n\nfunction $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, day) {\n  return day + Math.ceil(29.5 * (month - 1)) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30) + epoch - 1;\n}\n\nfunction $f2f3e0e3a817edbd$var$julianDayToIslamic(calendar, epoch, jd) {\n  let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);\n  let month = Math.min(12, Math.ceil((jd - (29 + $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);\n  let day = jd - $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, 1) + 1;\n  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(calendar, year, month, day);\n}\n\nfunction $f2f3e0e3a817edbd$var$isLeapYear(year) {\n  return (14 + 11 * year) % 30 < 11;\n}\n\nclass $f2f3e0e3a817edbd$export$2066795aadd37bfc {\n  fromJulianDay(jd) {\n    return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$CIVIL_EPOC, jd);\n  }\n\n  toJulianDay(date) {\n    return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$CIVIL_EPOC, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date) {\n    let length = 29 + date.month % 2;\n    if (date.month === 12 && $f2f3e0e3a817edbd$var$isLeapYear(date.year)) length++;\n    return length;\n  }\n\n  getMonthsInYear() {\n    return 12;\n  }\n\n  getDaysInYear(date) {\n    return $f2f3e0e3a817edbd$var$isLeapYear(date.year) ? 355 : 354;\n  }\n\n  getYearsInEra() {\n    return 9999;\n  }\n\n  getEras() {\n    return ['AH'];\n  }\n\n  constructor() {\n    this.identifier = 'islamic-civil';\n  }\n\n}\n\nclass $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 extends $f2f3e0e3a817edbd$export$2066795aadd37bfc {\n  fromJulianDay(jd) {\n    return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, jd);\n  }\n\n  toJulianDay(date) {\n    return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, date.year, date.month, date.day);\n  }\n\n  constructor() {\n    super(...arguments);\n    this.identifier = 'islamic-tbla';\n  }\n\n} // Generated by scripts/generate-umalqura.js\n\n\nconst $f2f3e0e3a817edbd$var$UMALQURA_DATA = 'qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=';\nlet $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH;\nlet $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE;\n\nfunction $f2f3e0e3a817edbd$var$umalquraYearStart(year) {\n  return $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS + $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];\n}\n\nfunction $f2f3e0e3a817edbd$var$umalquraMonthLength(year, month) {\n  let idx = year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START;\n  let mask = 1 << 11 - (month - 1);\n  if (($f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH[idx] & mask) === 0) return 29;else return 30;\n}\n\nfunction $f2f3e0e3a817edbd$var$umalquraMonthStart(year, month) {\n  let day = $f2f3e0e3a817edbd$var$umalquraYearStart(year);\n\n  for (let i = 1; i < month; i++) day += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);\n\n  return day;\n}\n\nfunction $f2f3e0e3a817edbd$var$umalquraYearLength(year) {\n  return $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year + 1 - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];\n}\n\nclass $f2f3e0e3a817edbd$export$5baab4758c231076 extends $f2f3e0e3a817edbd$export$2066795aadd37bfc {\n  fromJulianDay(jd) {\n    let days = jd - $f2f3e0e3a817edbd$var$CIVIL_EPOC;\n    let startDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_START);\n    let endDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END);\n    if (days < startDays || days > endDays) return super.fromJulianDay(jd);else {\n      let y = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START - 1;\n      let m = 1;\n      let d = 1;\n\n      while (d > 0) {\n        y++;\n        d = days - $f2f3e0e3a817edbd$var$umalquraYearStart(y) + 1;\n        let yearLength = $f2f3e0e3a817edbd$var$umalquraYearLength(y);\n\n        if (d === yearLength) {\n          m = 12;\n          break;\n        } else if (d < yearLength) {\n          let monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);\n          m = 1;\n\n          while (d > monthLength) {\n            d -= monthLength;\n            m++;\n            monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);\n          }\n\n          break;\n        }\n      }\n\n      return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, y, m, days - $f2f3e0e3a817edbd$var$umalquraMonthStart(y, m) + 1);\n    }\n  }\n\n  toJulianDay(date) {\n    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.toJulianDay(date);\n    return $f2f3e0e3a817edbd$var$CIVIL_EPOC + $f2f3e0e3a817edbd$var$umalquraMonthStart(date.year, date.month) + (date.day - 1);\n  }\n\n  getDaysInMonth(date) {\n    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.getDaysInMonth(date);\n    return $f2f3e0e3a817edbd$var$umalquraMonthLength(date.year, date.month);\n  }\n\n  getDaysInYear(date) {\n    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.getDaysInYear(date);\n    return $f2f3e0e3a817edbd$var$umalquraYearLength(date.year);\n  }\n\n  constructor() {\n    super();\n    this.identifier = 'islamic-umalqura';\n    if (!$f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH) $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob($f2f3e0e3a817edbd$var$UMALQURA_DATA), c => c.charCodeAt(0)).buffer);\n\n    if (!$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE) {\n      $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE = new Uint32Array($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START + 1);\n      let yearStart = 0;\n\n      for (let year = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START; year <= $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END; year++) {\n        $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] = yearStart;\n\n        for (let i = 1; i <= 12; i++) yearStart += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);\n      }\n    }\n  }\n\n}\n\nconst $7c5f6fbf42389787$var$HEBREW_EPOCH = 347997; // Hebrew date calculations are performed in terms of days, hours, and\n// \"parts\" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.\n\nconst $7c5f6fbf42389787$var$HOUR_PARTS = 1080;\nconst $7c5f6fbf42389787$var$DAY_PARTS = 24 * $7c5f6fbf42389787$var$HOUR_PARTS; // An approximate value for the length of a lunar month.\n// It is used to calculate the approximate year and month of a given\n// absolute date.\n\nconst $7c5f6fbf42389787$var$MONTH_DAYS = 29;\nconst $7c5f6fbf42389787$var$MONTH_FRACT = 12 * $7c5f6fbf42389787$var$HOUR_PARTS + 793;\nconst $7c5f6fbf42389787$var$MONTH_PARTS = $7c5f6fbf42389787$var$MONTH_DAYS * $7c5f6fbf42389787$var$DAY_PARTS + $7c5f6fbf42389787$var$MONTH_FRACT;\n\nfunction $7c5f6fbf42389787$var$isLeapYear(year) {\n  return $2b4dce13dd5a17fa$export$842a2cf37af977e1(year * 7 + 1, 19) < 7;\n} // Test for delay of start of new year and to avoid\n// Sunday, Wednesday, and Friday as start of the new year.\n\n\nfunction $7c5f6fbf42389787$var$hebrewDelay1(year) {\n  let months = Math.floor((235 * year - 234) / 19);\n  let parts = 12084 + 13753 * months;\n  let day = months * 29 + Math.floor(parts / 25920);\n  if ($2b4dce13dd5a17fa$export$842a2cf37af977e1(3 * (day + 1), 7) < 3) day += 1;\n  return day;\n} // Check for delay in start of new year due to length of adjacent years\n\n\nfunction $7c5f6fbf42389787$var$hebrewDelay2(year) {\n  let last = $7c5f6fbf42389787$var$hebrewDelay1(year - 1);\n  let present = $7c5f6fbf42389787$var$hebrewDelay1(year);\n  let next = $7c5f6fbf42389787$var$hebrewDelay1(year + 1);\n  if (next - present === 356) return 2;\n  if (present - last === 382) return 1;\n  return 0;\n}\n\nfunction $7c5f6fbf42389787$var$startOfYear(year) {\n  return $7c5f6fbf42389787$var$hebrewDelay1(year) + $7c5f6fbf42389787$var$hebrewDelay2(year);\n}\n\nfunction $7c5f6fbf42389787$var$getDaysInYear(year) {\n  return $7c5f6fbf42389787$var$startOfYear(year + 1) - $7c5f6fbf42389787$var$startOfYear(year);\n}\n\nfunction $7c5f6fbf42389787$var$getYearType(year) {\n  let yearLength = $7c5f6fbf42389787$var$getDaysInYear(year);\n  if (yearLength > 380) yearLength -= 30; // Subtract length of leap month.\n\n  switch (yearLength) {\n    case 353:\n      return 0;\n    // deficient\n\n    case 354:\n      return 1;\n    // normal\n\n    case 355:\n      return 2;\n    // complete\n  }\n}\n\nfunction $7c5f6fbf42389787$var$getDaysInMonth(year, month) {\n  // Normalize month numbers from 1 - 13, even on non-leap years\n  if (month >= 6 && !$7c5f6fbf42389787$var$isLeapYear(year)) month++; // First of all, dispose of fixed-length 29 day months\n\n  if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) return 29;\n  let yearType = $7c5f6fbf42389787$var$getYearType(year); // If it's Heshvan, days depend on length of year\n\n  if (month === 2) return yearType === 2 ? 30 : 29; // Similarly, Kislev varies with the length of year\n\n  if (month === 3) return yearType === 0 ? 29 : 30; // Adar I only exists in leap years\n\n  if (month === 6) return $7c5f6fbf42389787$var$isLeapYear(year) ? 30 : 0;\n  return 30;\n}\n\nclass $7c5f6fbf42389787$export$ca405048b8fb5af {\n  fromJulianDay(jd) {\n    let d = jd - $7c5f6fbf42389787$var$HEBREW_EPOCH;\n    let m = d * $7c5f6fbf42389787$var$DAY_PARTS / $7c5f6fbf42389787$var$MONTH_PARTS; // Months (approx)\n\n    let year = Math.floor((19 * m + 234) / 235) + 1; // Years (approx)\n\n    let ys = $7c5f6fbf42389787$var$startOfYear(year); // 1st day of year\n\n    let dayOfYear = Math.floor(d - ys); // Because of the postponement rules, it's possible to guess wrong.  Fix it.\n\n    while (dayOfYear < 1) {\n      year--;\n      ys = $7c5f6fbf42389787$var$startOfYear(year);\n      dayOfYear = Math.floor(d - ys);\n    } // Now figure out which month we're in, and the date within that month\n\n\n    let month = 1;\n    let monthStart = 0;\n\n    while (monthStart < dayOfYear) {\n      monthStart += $7c5f6fbf42389787$var$getDaysInMonth(year, month);\n      month++;\n    }\n\n    month--;\n    monthStart -= $7c5f6fbf42389787$var$getDaysInMonth(year, month);\n    let day = dayOfYear - monthStart;\n    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, year, month, day);\n  }\n\n  toJulianDay(date) {\n    let jd = $7c5f6fbf42389787$var$startOfYear(date.year);\n\n    for (let month = 1; month < date.month; month++) jd += $7c5f6fbf42389787$var$getDaysInMonth(date.year, month);\n\n    return jd + date.day + $7c5f6fbf42389787$var$HEBREW_EPOCH;\n  }\n\n  getDaysInMonth(date) {\n    return $7c5f6fbf42389787$var$getDaysInMonth(date.year, date.month);\n  }\n\n  getMonthsInYear(date) {\n    return $7c5f6fbf42389787$var$isLeapYear(date.year) ? 13 : 12;\n  }\n\n  getDaysInYear(date) {\n    return $7c5f6fbf42389787$var$getDaysInYear(date.year);\n  }\n\n  getYearsInEra() {\n    return 9999;\n  }\n\n  getEras() {\n    return ['AM'];\n  }\n\n  balanceYearMonth(date, previousDate) {\n    // Keep date in the same month when switching between leap years and non leap years\n    if (previousDate.year !== date.year) {\n      if ($7c5f6fbf42389787$var$isLeapYear(previousDate.year) && !$7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month--;else if (!$7c5f6fbf42389787$var$isLeapYear(previousDate.year) && $7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month++;\n    }\n  }\n\n  constructor() {\n    this.identifier = 'hebrew';\n  }\n\n}\n\nconst $b956b2d7a6cf451f$var$ETHIOPIC_EPOCH = 1723856;\nconst $b956b2d7a6cf451f$var$COPTIC_EPOCH = 1824665; // The delta between Amete Alem 1 and Amete Mihret 1\n// AA 5501 = AM 1\n\nconst $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA = 5500;\n\nfunction $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, day) {\n  return epoch // difference from Julian epoch to 1,1,1\n  + 365 * year // number of days from years\n  + Math.floor(year / 4) // extra day of leap year\n  + 30 * (month - 1) // number of days from months (1 based)\n  + day - 1 // number of days for present month (1 based)\n  ;\n}\n\nfunction $b956b2d7a6cf451f$var$julianDayToCE(calendar, epoch, jd) {\n  let year = Math.floor(4 * (jd - epoch) / 1461);\n  let month = 1 + Math.floor((jd - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, 1, 1)) / 30);\n  let day = jd + 1 - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, 1);\n  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(calendar, year, month, day);\n}\n\nfunction $b956b2d7a6cf451f$var$getLeapDay(year) {\n  return Math.floor(year % 4 / 3);\n}\n\nfunction $b956b2d7a6cf451f$var$getDaysInMonth(year, month) {\n  // The Ethiopian and Coptic calendars have 13 months, 12 of 30 days each and\n  // an intercalary month at the end of the year of 5 or 6 days, depending whether\n  // the year is a leap year or not. The Leap Year follows the same rules as the\n  // Julian Calendar so that the extra month always has six days in the year before\n  // a Julian Leap Year.\n  if (month % 13 !== 0) // not intercalary month\n    return 30;else // intercalary month 5 days + possible leap day\n    return $b956b2d7a6cf451f$var$getLeapDay(year) + 5;\n}\n\nclass $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {\n  fromJulianDay(jd) {\n    let date = $b956b2d7a6cf451f$var$julianDayToCE(this, $b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);\n    if (date.year > 0) date.era = 'AM';else {\n      date.era = 'AA';\n      date.year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n    }\n    return date;\n  }\n\n  toJulianDay(date) {\n    let year = date.year;\n    if (date.era === 'AA') year -= $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n    return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date) {\n    let year = date.year;\n    if (date.era === 'AA') year -= $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n    return $b956b2d7a6cf451f$var$getDaysInMonth(year, date.month);\n  }\n\n  getMonthsInYear() {\n    return 13;\n  }\n\n  getDaysInYear(date) {\n    return 365 + $b956b2d7a6cf451f$var$getLeapDay(date.year);\n  }\n\n  getYearsInEra() {\n    return 9999;\n  }\n\n  getEras() {\n    return ['AA', 'AM'];\n  }\n\n  constructor() {\n    this.identifier = 'ethiopic';\n  }\n\n}\n\nclass $b956b2d7a6cf451f$export$d72e0c37005a4914 extends $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {\n  fromJulianDay(jd) {\n    let date = $b956b2d7a6cf451f$var$julianDayToCE(this, $b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);\n    date.era = 'AA';\n    date.year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n    return date;\n  }\n\n  getEras() {\n    return ['AA'];\n  }\n\n  constructor() {\n    super(...arguments);\n    this.identifier // also known as 'ethiopic-amete-alem' in ICU\n    = 'ethioaa';\n  }\n\n}\n\nclass $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 extends $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {\n  fromJulianDay(jd) {\n    let date = $b956b2d7a6cf451f$var$julianDayToCE(this, $b956b2d7a6cf451f$var$COPTIC_EPOCH, jd);\n\n    if (date.year <= 0) {\n      date.era = 'BCE';\n      date.year = 1 - date.year;\n    } else date.era = 'CE';\n\n    return date;\n  }\n\n  toJulianDay(date) {\n    let year = date.year;\n    if (date.era === 'BCE') year = 1 - year;\n    return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$COPTIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date) {\n    let year = date.year;\n    if (date.era === 'BCE') year = 1 - year;\n    return $b956b2d7a6cf451f$var$getDaysInMonth(year, date.month);\n  }\n\n  getYearsToAdd(date, years) {\n    return date.era === 'BCE' ? -years : years;\n  }\n\n  getEras() {\n    return ['BCE', 'CE'];\n  }\n\n  constructor() {\n    super(...arguments);\n    this.identifier = 'coptic';\n  }\n\n}\n\nfunction $64244302c3013299$export$dd0bbc9b26defe37(name) {\n  switch (name) {\n    case 'buddhist':\n      return new $8d73d47422ca7302$export$42d20a78301dee44();\n\n    case 'ethiopic':\n      return new $b956b2d7a6cf451f$export$26ba6eab5e20cd7d();\n\n    case 'ethioaa':\n      return new $b956b2d7a6cf451f$export$d72e0c37005a4914();\n\n    case 'coptic':\n      return new $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1();\n\n    case 'hebrew':\n      return new $7c5f6fbf42389787$export$ca405048b8fb5af();\n\n    case 'indian':\n      return new $82c358003bdda0a8$export$39f31c639fa15726();\n\n    case 'islamic-civil':\n      return new $f2f3e0e3a817edbd$export$2066795aadd37bfc();\n\n    case 'islamic-tbla':\n      return new $f2f3e0e3a817edbd$export$37f0887f2f9d22f7();\n\n    case 'islamic-umalqura':\n      return new $f2f3e0e3a817edbd$export$5baab4758c231076();\n\n    case 'japanese':\n      return new $62225008020f0a13$export$b746ab2b60cdffbf();\n\n    case 'persian':\n      return new $f3ed2e4472ae7e25$export$37fccdbfd14c5939();\n\n    case 'roc':\n      return new $5f31bd6f0c8940b2$export$65e01080afcb0799();\n\n    case 'gregory':\n    default:\n      return new $3b62074eb05584b2$export$80ee6245ec4f29ec();\n  }\n}\n\nvar $484f90c8d1b5efb9$exports = {};\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet $fb18d541ea1ad717$var$formatterCache = new Map();\n\nclass $fb18d541ea1ad717$export$ad991b66133851cf {\n  /** Formats a date as a string according to the locale and format options passed to the constructor. */\n  format(value) {\n    return this.formatter.format(value);\n  }\n  /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */\n\n\n  formatToParts(value) {\n    return this.formatter.formatToParts(value);\n  }\n  /** Formats a date range as a string. */\n\n\n  formatRange(start, end) {\n    // @ts-ignore\n    if (typeof this.formatter.formatRange === 'function') // @ts-ignore\n      return this.formatter.formatRange(start, end);\n    if (end < start) throw new RangeError('End date must be >= start date'); // Very basic fallback for old browsers.\n\n    return `${this.formatter.format(start)} – ${this.formatter.format(end)}`;\n  }\n  /** Formats a date range as an array of parts. */\n\n\n  formatRangeToParts(start, end) {\n    // @ts-ignore\n    if (typeof this.formatter.formatRangeToParts === 'function') // @ts-ignore\n      return this.formatter.formatRangeToParts(start, end);\n    if (end < start) throw new RangeError('End date must be >= start date');\n    let startParts = this.formatter.formatToParts(start);\n    let endParts = this.formatter.formatToParts(end);\n    return [...startParts.map(p => ({ ...p,\n      source: 'startRange'\n    })), {\n      type: 'literal',\n      value: ' – ',\n      source: 'shared'\n    }, ...endParts.map(p => ({ ...p,\n      source: 'endRange'\n    }))];\n  }\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n\n\n  resolvedOptions() {\n    let resolvedOptions = this.formatter.resolvedOptions();\n\n    if ($fb18d541ea1ad717$var$hasBuggyResolvedHourCycle()) {\n      if (!this.resolvedHourCycle) this.resolvedHourCycle = $fb18d541ea1ad717$var$getResolvedHourCycle(resolvedOptions.locale, this.options);\n      resolvedOptions.hourCycle = this.resolvedHourCycle;\n      resolvedOptions.hour12 = this.resolvedHourCycle === 'h11' || this.resolvedHourCycle === 'h12';\n    }\n\n    return resolvedOptions;\n  }\n\n  constructor(locale) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options);\n    this.options = options;\n  }\n\n} // There are multiple bugs involving the hour12 and hourCycle options in various browser engines.\n//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)\n//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)\n//     rather than h12 (12:00 - 11:59).\n//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal\n//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]\n// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791\n// [2] https://github.com/tc39/ecma402/issues/402\n// [3] https://bugs.webkit.org/show_bug.cgi?id=229313\n// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802\n\n\nconst $fb18d541ea1ad717$var$hour12Preferences = {\n  true: {\n    // Only Japanese uses the h11 style for 12 hour time. All others use h12.\n    ja: 'h11'\n  },\n  false: {}\n};\n\nfunction $fb18d541ea1ad717$var$getCachedDateFormatter(locale) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.\n  // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.\n  if (typeof options.hour12 === 'boolean' && $fb18d541ea1ad717$var$hasBuggyHour12Behavior()) {\n    options = { ...options\n    };\n    let pref = $fb18d541ea1ad717$var$hour12Preferences[String(options.hour12)][locale.split('-')[0]];\n    let defaultHourCycle = options.hour12 ? 'h12' : 'h23';\n    options.hourCycle = pref !== null && pref !== void 0 ? pref : defaultHourCycle;\n    delete options.hour12;\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if ($fb18d541ea1ad717$var$formatterCache.has(cacheKey)) return $fb18d541ea1ad717$var$formatterCache.get(cacheKey);\n  let numberFormatter = new Intl.DateTimeFormat(locale, options);\n  $fb18d541ea1ad717$var$formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\nlet $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = null;\n\nfunction $fb18d541ea1ad717$var$hasBuggyHour12Behavior() {\n  if ($fb18d541ea1ad717$var$_hasBuggyHour12Behavior == null) $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = new Intl.DateTimeFormat('en-US', {\n    hour: 'numeric',\n    hour12: false\n  }).format(new Date(2020, 2, 3, 0)) === '24';\n  return $fb18d541ea1ad717$var$_hasBuggyHour12Behavior;\n}\n\nlet $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = null;\n\nfunction $fb18d541ea1ad717$var$hasBuggyResolvedHourCycle() {\n  if ($fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle == null) $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = new Intl.DateTimeFormat('fr', {\n    hour: 'numeric',\n    hour12: false\n  }).resolvedOptions().hourCycle === 'h12';\n  return $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle;\n}\n\nfunction $fb18d541ea1ad717$var$getResolvedHourCycle(locale, options) {\n  if (!options.timeStyle && !options.hour) return undefined; // Work around buggy results in resolved hourCycle and hour12 options in WebKit.\n  // Format the minimum possible hour and maximum possible hour in a day and parse the results.\n\n  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, '');\n  locale += (locale.includes('-u-') ? '' : '-u') + '-nu-latn';\n  let formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, { ...options,\n    timeZone: undefined // use local timezone\n\n  });\n  let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find(p => p.type === 'hour').value, 10);\n  let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find(p => p.type === 'hour').value, 10);\n  if (min === 0 && max === 23) return 'h23';\n  if (min === 24 && max === 23) return 'h24';\n  if (min === 0 && max === 11) return 'h11';\n  if (min === 12 && max === 11) return 'h12';\n  throw new Error('Unexpected hour cycle result');\n}\n\nexport { $35ea8db9cb2ccb90$export$99faa760c7908e4f as CalendarDate, $35ea8db9cb2ccb90$export$ca871e8dbb80966f as CalendarDateTime, $35ea8db9cb2ccb90$export$680ea196effce5f as Time, $35ea8db9cb2ccb90$export$d3b7288e7994edea as ZonedDateTime, $3b62074eb05584b2$export$80ee6245ec4f29ec as GregorianCalendar, $62225008020f0a13$export$b746ab2b60cdffbf as JapaneseCalendar, $8d73d47422ca7302$export$42d20a78301dee44 as BuddhistCalendar, $5f31bd6f0c8940b2$export$65e01080afcb0799 as TaiwanCalendar, $f3ed2e4472ae7e25$export$37fccdbfd14c5939 as PersianCalendar, $82c358003bdda0a8$export$39f31c639fa15726 as IndianCalendar, $f2f3e0e3a817edbd$export$2066795aadd37bfc as IslamicCivilCalendar, $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 as IslamicTabularCalendar, $f2f3e0e3a817edbd$export$5baab4758c231076 as IslamicUmalquraCalendar, $7c5f6fbf42389787$export$ca405048b8fb5af as HebrewCalendar, $b956b2d7a6cf451f$export$26ba6eab5e20cd7d as EthiopicCalendar, $b956b2d7a6cf451f$export$d72e0c37005a4914 as EthiopicAmeteAlemCalendar, $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 as CopticCalendar, $64244302c3013299$export$dd0bbc9b26defe37 as createCalendar, $11d87f3f76e88657$export$93522d1a439f3617 as toCalendarDate, $11d87f3f76e88657$export$b21e0b124e224484 as toCalendarDateTime, $11d87f3f76e88657$export$d33f79e3ffc3dc83 as toTime, $11d87f3f76e88657$export$b4a036af3fc0b032 as toCalendar, $11d87f3f76e88657$export$84c95a83c799e074 as toZoned, $11d87f3f76e88657$export$538b00033cc11c75 as toTimeZone, $11d87f3f76e88657$export$d9b67bc93c097491 as toLocalTimeZone, $14e0f24ef4ac5c92$export$ea39ec197993aef0 as isSameDay, $14e0f24ef4ac5c92$export$a18c89cbd24170ff as isSameMonth, $14e0f24ef4ac5c92$export$5841f9eb9773f25f as isSameYear, $14e0f24ef4ac5c92$export$91b62ebf2ba703ee as isEqualDay, $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2 as isEqualMonth, $14e0f24ef4ac5c92$export$ea840f5a6dda8147 as isEqualYear, $14e0f24ef4ac5c92$export$629b0a497aa65267 as isToday, $14e0f24ef4ac5c92$export$2061056d06d7cdf7 as getDayOfWeek, $14e0f24ef4ac5c92$export$461939dd4422153 as now, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3 as today, $14e0f24ef4ac5c92$export$126c91c941de7e as getHoursInDay, $14e0f24ef4ac5c92$export$aa8b41735afcabd2 as getLocalTimeZone, $14e0f24ef4ac5c92$export$a5a3b454ada2268e as startOfMonth, $14e0f24ef4ac5c92$export$42c81a444fbfb5d4 as startOfWeek, $14e0f24ef4ac5c92$export$f91e89d3d0406102 as startOfYear, $14e0f24ef4ac5c92$export$a2258d9c4118825c as endOfMonth, $14e0f24ef4ac5c92$export$ef8b6d9133084f4e as endOfWeek, $14e0f24ef4ac5c92$export$8b7aa55c66d5569e as endOfYear, $14e0f24ef4ac5c92$export$5412ac11713b72ad as getMinimumMonthInYear, $14e0f24ef4ac5c92$export$b2f4953d301981d5 as getMinimumDayInMonth, $14e0f24ef4ac5c92$export$ccc1b2479e7dd654 as getWeeksInMonth, $14e0f24ef4ac5c92$export$5c333a116e949cdd as minDate, $14e0f24ef4ac5c92$export$a75f2bff57811055 as maxDate, $14e0f24ef4ac5c92$export$618d60ea299da42 as isWeekend, $14e0f24ef4ac5c92$export$ee9d87258e1d19ed as isWeekday, $fae977aafc393c5c$export$6b862160d295c8e as parseDate, $fae977aafc393c5c$export$588937bcd60ade55 as parseDateTime, $fae977aafc393c5c$export$c9698ec7f05a07e1 as parseTime, $fae977aafc393c5c$export$5adfdab05168c219 as parseAbsolute, $fae977aafc393c5c$export$8e384432362ed0f0 as parseAbsoluteToLocal, $fae977aafc393c5c$export$fd7893f06e92a6a4 as parseZonedDateTime, $fb18d541ea1ad717$export$ad991b66133851cf as DateFormatter };","map":{"version":3,"mappings":"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","names":["$2fe286d2fb449abb$export$7a5acbd77d414bd9","AD","AE","AF","AI","AL","AM","AN","AT","AX","AZ","BA","BE","BG","BH","BM","BN","BY","CH","CL","CM","CR","CY","CZ","DE","DJ","DK","DZ","EC","EE","EG","ES","FI","FJ","FO","FR","GB","GE","GF","GP","GR","HR","HU","IE","IQ","IR","IS","IT","JO","KG","KW","KZ","LB","LI","LK","LT","LU","LV","LY","MC","MD","ME","MK","MN","MQ","MV","MY","NL","NO","NZ","OM","PL","QA","RE","RO","RS","RU","SD","SE","SI","SK","SM","SY","TJ","TM","TR","UA","UY","UZ","VA","VN","XK","$14e0f24ef4ac5c92$export$ea39ec197993aef0","a","b","$11d87f3f76e88657$export$b4a036af3fc0b032","calendar","era","year","month","day","$14e0f24ef4ac5c92$export$a18c89cbd24170ff","$14e0f24ef4ac5c92$export$a5a3b454ada2268e","$14e0f24ef4ac5c92$export$5841f9eb9773f25f","$14e0f24ef4ac5c92$export$f91e89d3d0406102","$14e0f24ef4ac5c92$export$91b62ebf2ba703ee","identifier","$14e0f24ef4ac5c92$export$5a8da0c44a3afdf2","$14e0f24ef4ac5c92$export$ea840f5a6dda8147","$14e0f24ef4ac5c92$export$629b0a497aa65267","date","timeZone","$14e0f24ef4ac5c92$export$d0bdf45af03a6ea3","$14e0f24ef4ac5c92$export$2061056d06d7cdf7","locale","julian","toJulianDay","dayOfWeek","Math","ceil","$14e0f24ef4ac5c92$var$getWeekStart","$14e0f24ef4ac5c92$export$461939dd4422153","$11d87f3f76e88657$export$1b96692a1ba042ac","Date","now","$11d87f3f76e88657$export$93522d1a439f3617","$14e0f24ef4ac5c92$export$68781ddf31c0090f","$14e0f24ef4ac5c92$export$c19a80a9721b80f6","$14e0f24ef4ac5c92$var$timeToMs","hour","minute","second","millisecond","$14e0f24ef4ac5c92$export$126c91c941de7e","ms","$11d87f3f76e88657$export$5107c82f94518f5c","tomorrow","add","days","tomorrowMs","$14e0f24ef4ac5c92$var$localTimeZone","$14e0f24ef4ac5c92$export$aa8b41735afcabd2","Intl","DateTimeFormat","resolvedOptions","subtract","$14e0f24ef4ac5c92$export$a2258d9c4118825c","getDaysInMonth","months","$14e0f24ef4ac5c92$export$8b7aa55c66d5569e","getMonthsInYear","$14e0f24ef4ac5c92$export$5412ac11713b72ad","getMinimumMonthInYear","$14e0f24ef4ac5c92$export$b2f4953d301981d5","getMinimumDayInMonth","$14e0f24ef4ac5c92$export$42c81a444fbfb5d4","$14e0f24ef4ac5c92$export$ef8b6d9133084f4e","$14e0f24ef4ac5c92$var$cachedRegions","Map","$14e0f24ef4ac5c92$var$getRegion","Locale","region","get","maximize","set","part","split","$14e0f24ef4ac5c92$export$ccc1b2479e7dd654","$14e0f24ef4ac5c92$export$5c333a116e949cdd","compare","$14e0f24ef4ac5c92$export$a75f2bff57811055","$14e0f24ef4ac5c92$var$WEEKEND_DATA","IL","SA","YE","$14e0f24ef4ac5c92$export$618d60ea299da42","start","end","$14e0f24ef4ac5c92$export$ee9d87258e1d19ed","$2b4dce13dd5a17fa$export$842a2cf37af977e1","amount","numerator","floor","$2b4dce13dd5a17fa$export$784d13d8ee351f07","$35ea8db9cb2ccb90$export$99faa760c7908e4f","$2b4dce13dd5a17fa$export$27fa0172ae2644b3","$35ea8db9cb2ccb90$export$ca871e8dbb80966f","$3b62074eb05584b2$var$EPOCH","$3b62074eb05584b2$export$f297eb839006d339","$3b62074eb05584b2$export$c36e0ecb2d4fa69d","y1","monthOffset","$3b62074eb05584b2$export$553d7fa8e3805fc0","$3b62074eb05584b2$export$4475b7e617eb123c","$3b62074eb05584b2$var$daysInMonth","standard","leapyear","$3b62074eb05584b2$export$80ee6245ec4f29ec","fromJulianDay","jd","jd0","depoch","quadricent","dqc","cent","dcent","quad","dquad","yindex","extendedYear","yearDay","leapAdj","getDaysInYear","getYearsInEra","getEras","getYearsToAdd","years","balanceDate","$11d87f3f76e88657$export$bd4fb2bc8bb06fb","$11d87f3f76e88657$var$epochFromParts","setUTCHours","setUTCFullYear","getTime","$11d87f3f76e88657$export$59c99f3515d3493f","getTimezoneOffset","$11d87f3f76e88657$var$getTimeZoneParts","utc","$11d87f3f76e88657$var$formattersByTimeZone","formatter","hour12","parts","formatToParts","namedParts","type","value","$11d87f3f76e88657$var$DAYMILLIS","$11d87f3f76e88657$export$136f38efe7caf549","earlier","later","$11d87f3f76e88657$var$getValidWallTimes","found","filter","absolute","$11d87f3f76e88657$var$isValidWallTime","disambiguation","dateTime","$11d87f3f76e88657$export$b21e0b124e224484","setFullYear","setHours","offsetBefore","offsetAfter","valid","length","RangeError","min","max","$11d87f3f76e88657$export$e67a095c620b86fe","offset","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","$35ea8db9cb2ccb90$export$d3b7288e7994edea","$11d87f3f76e88657$export$e57ff100d91bd4b9","$11d87f3f76e88657$export$d7f92bcd3596b086","$11d87f3f76e88657$export$6f4d78149f3f53ac","$11d87f3f76e88657$export$4d0393e732857be5","time","$11d87f3f76e88657$export$d33f79e3ffc3dc83","$35ea8db9cb2ccb90$export$680ea196effce5f","calendarDate","copy","$11d87f3f76e88657$export$84c95a83c799e074","$11d87f3f76e88657$export$538b00033cc11c75","$11d87f3f76e88657$export$83aac07b4c37b25","$11d87f3f76e88657$export$d9b67bc93c097491","$735220c2d4774dd3$var$ONE_HOUR","$735220c2d4774dd3$export$e16d8520af44a096","duration","mutableDate","$735220c2d4774dd3$var$addTimeFields","$735220c2d4774dd3$var$addYears","balanceYearMonth","$735220c2d4774dd3$var$balanceYearMonth","$735220c2d4774dd3$var$constrainMonthDay","weeks","$735220c2d4774dd3$var$balanceDay","monthsInYear","$735220c2d4774dd3$export$c4e2ecac49351ef2","constrainDate","$735220c2d4774dd3$export$3e2544e88a25bff8","inverseDuration","key","$735220c2d4774dd3$export$4e2d2ead65e5f7e3","$735220c2d4774dd3$export$adaa4cf7ef1b65be","fields","$735220c2d4774dd3$export$e5d5e1c1822b6e56","mutableValue","$735220c2d4774dd3$export$7555de1e070510cb","$735220c2d4774dd3$var$balanceTime","$735220c2d4774dd3$var$nonNegativeMod","result","hours","minutes","seconds","milliseconds","$735220c2d4774dd3$export$7ed87b6bc2506470","res","$735220c2d4774dd3$export$fe34d3a381cd7501","$735220c2d4774dd3$export$d52ced6badfb9a4c","field","options","mutable","eras","eraIndex","indexOf","Error","$735220c2d4774dd3$var$cycleValue","round","Infinity","$735220c2d4774dd3$export$dd02b3e0007dfe28","hourCycle","isPM","sign","div","abs","$735220c2d4774dd3$export$96b1d28349274637","$735220c2d4774dd3$export$6814caac34ca03c7","$735220c2d4774dd3$export$9a297d111fc86b79","plainDateTime","minDate","minAbsolute","maxDate","maxAbsolute","pop","ms1","remainder","$735220c2d4774dd3$export$31b5430eb18be4f8","$fae977aafc393c5c$var$TIME_RE","$fae977aafc393c5c$var$DATE_RE","$fae977aafc393c5c$var$DATE_TIME_RE","$fae977aafc393c5c$var$ZONED_DATE_TIME_RE","$fae977aafc393c5c$var$ABSOLUTE_RE","$fae977aafc393c5c$export$c9698ec7f05a07e1","m","match","$fae977aafc393c5c$var$parseNumber","$fae977aafc393c5c$export$6b862160d295c8e","$fae977aafc393c5c$export$588937bcd60ade55","$fae977aafc393c5c$export$fd7893f06e92a6a4","ref","absolutes","includes","$fae977aafc393c5c$var$offsetToString","$fae977aafc393c5c$export$4223de14708adc63","$fae977aafc393c5c$export$5adfdab05168c219","$fae977aafc393c5c$export$8e384432362ed0f0","val","Number","$fae977aafc393c5c$export$f59dee82248f5ad4","String","padStart","slice","$fae977aafc393c5c$export$60dfd74aa96791bd","gregorianDate","offsetHours","offsetMinutes","$fae977aafc393c5c$export$bf79f1ebf4b18792","$35ea8db9cb2ccb90$var$shiftArgs","args","shift","cycle","toDate","toString","_type","_type1","_type2","toAbsoluteString","toISOString","_type3","$62225008020f0a13$var$ERA_START_DATES","$62225008020f0a13$var$ERA_END_DATES","$62225008020f0a13$var$ERA_ADDENDS","$62225008020f0a13$var$ERA_NAMES","$62225008020f0a13$var$findEraFromGregorianDate","idx","findIndex","$62225008020f0a13$var$toGregorian","eraAddend","$62225008020f0a13$export$b746ab2b60cdffbf","endYear","endMonth","endDay","maxYear","startMonth","startDay","next","cur","$62225008020f0a13$var$getMinimums","$8d73d47422ca7302$var$BUDDHIST_ERA_START","$8d73d47422ca7302$export$42d20a78301dee44","$8d73d47422ca7302$var$toGregorian","$5f31bd6f0c8940b2$var$TAIWAN_ERA_START","$5f31bd6f0c8940b2$var$gregorianYear","$5f31bd6f0c8940b2$var$gregorianToTaiwan","y","$5f31bd6f0c8940b2$export$65e01080afcb0799","$5f31bd6f0c8940b2$var$toGregorian","$f3ed2e4472ae7e25$var$PERSIAN_EPOCH","$f3ed2e4472ae7e25$var$isLeapYear","y0","$f3ed2e4472ae7e25$var$persianToJulianDay","$f3ed2e4472ae7e25$export$37fccdbfd14c5939","d0","n2820","d1","y2820","yDay","$82c358003bdda0a8$var$INDIAN_ERA_START","$82c358003bdda0a8$var$INDIAN_YEAR_START","$82c358003bdda0a8$export$39f31c639fa15726","indianYear","leapMonth","indianMonth","indianDay","mDay","$f2f3e0e3a817edbd$var$CIVIL_EPOC","$f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC","$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START","$f2f3e0e3a817edbd$var$UMALQURA_YEAR_END","$f2f3e0e3a817edbd$var$UMALQURA_START_DAYS","$f2f3e0e3a817edbd$var$islamicToJulianDay","epoch","$f2f3e0e3a817edbd$var$julianDayToIslamic","$f2f3e0e3a817edbd$var$isLeapYear","$f2f3e0e3a817edbd$export$2066795aadd37bfc","$f2f3e0e3a817edbd$export$37f0887f2f9d22f7","$f2f3e0e3a817edbd$var$UMALQURA_DATA","$f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH","$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE","$f2f3e0e3a817edbd$var$umalquraYearStart","$f2f3e0e3a817edbd$var$umalquraMonthLength","mask","$f2f3e0e3a817edbd$var$umalquraMonthStart","i","$f2f3e0e3a817edbd$var$umalquraYearLength","$f2f3e0e3a817edbd$export$5baab4758c231076","startDays","endDays","d","yearLength","monthLength","Uint16Array","Uint8Array","from","atob","c","charCodeAt","buffer","Uint32Array","yearStart","$7c5f6fbf42389787$var$HEBREW_EPOCH","$7c5f6fbf42389787$var$HOUR_PARTS","$7c5f6fbf42389787$var$DAY_PARTS","$7c5f6fbf42389787$var$MONTH_DAYS","$7c5f6fbf42389787$var$MONTH_FRACT","$7c5f6fbf42389787$var$MONTH_PARTS","$7c5f6fbf42389787$var$isLeapYear","$7c5f6fbf42389787$var$hebrewDelay1","$7c5f6fbf42389787$var$hebrewDelay2","last","present","$7c5f6fbf42389787$var$startOfYear","$7c5f6fbf42389787$var$getDaysInYear","$7c5f6fbf42389787$var$getYearType","$7c5f6fbf42389787$var$getDaysInMonth","yearType","$7c5f6fbf42389787$export$ca405048b8fb5af","ys","dayOfYear","monthStart","previousDate","$b956b2d7a6cf451f$var$ETHIOPIC_EPOCH","$b956b2d7a6cf451f$var$COPTIC_EPOCH","$b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA","$b956b2d7a6cf451f$var$ceToJulianDay","$b956b2d7a6cf451f$var$julianDayToCE","$b956b2d7a6cf451f$var$getLeapDay","$b956b2d7a6cf451f$var$getDaysInMonth","$b956b2d7a6cf451f$export$26ba6eab5e20cd7d","$b956b2d7a6cf451f$export$d72e0c37005a4914","$b956b2d7a6cf451f$export$fe6243cbe1a4b7c1","$64244302c3013299$export$dd0bbc9b26defe37","name","$fb18d541ea1ad717$var$formatterCache","$fb18d541ea1ad717$export$ad991b66133851cf","format","formatRange","formatRangeToParts","startParts","endParts","map","p","source","$fb18d541ea1ad717$var$hasBuggyResolvedHourCycle","resolvedHourCycle","$fb18d541ea1ad717$var$getResolvedHourCycle","$fb18d541ea1ad717$var$getCachedDateFormatter","$fb18d541ea1ad717$var$hour12Preferences","true","ja","false","$fb18d541ea1ad717$var$hasBuggyHour12Behavior","pref","defaultHourCycle","cacheKey","Object","entries","sort","join","has","numberFormatter","$fb18d541ea1ad717$var$_hasBuggyHour12Behavior","$fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle","timeStyle","undefined","replace","parseInt","find"],"sources":["packages/@internationalized/date/src/weekStartData.ts","packages/@internationalized/date/src/queries.ts","packages/@internationalized/date/src/utils.ts","packages/@internationalized/date/src/calendars/GregorianCalendar.ts","packages/@internationalized/date/src/conversion.ts","packages/@internationalized/date/src/manipulation.ts","packages/@internationalized/date/src/string.ts","packages/@internationalized/date/src/CalendarDate.ts","packages/@internationalized/date/src/calendars/JapaneseCalendar.ts","packages/@internationalized/date/src/calendars/BuddhistCalendar.ts","packages/@internationalized/date/src/calendars/TaiwanCalendar.ts","packages/@internationalized/date/src/calendars/PersianCalendar.ts","packages/@internationalized/date/src/calendars/IndianCalendar.ts","packages/@internationalized/date/src/calendars/IslamicCalendar.ts","packages/@internationalized/date/src/calendars/HebrewCalendar.ts","packages/@internationalized/date/src/calendars/EthiopicCalendar.ts","packages/@internationalized/date/src/createCalendar.ts","packages/@internationalized/date/src/DateFormatter.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Data from https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/weekData.json\n// Locales starting on Sunday have been removed for compression.\nexport const weekStartData = {\n  '001': 1,\n  AD: 1,\n  AE: 6,\n  AF: 6,\n  AI: 1,\n  AL: 1,\n  AM: 1,\n  AN: 1,\n  AT: 1,\n  AX: 1,\n  AZ: 1,\n  BA: 1,\n  BE: 1,\n  BG: 1,\n  BH: 6,\n  BM: 1,\n  BN: 1,\n  BY: 1,\n  CH: 1,\n  CL: 1,\n  CM: 1,\n  CR: 1,\n  CY: 1,\n  CZ: 1,\n  DE: 1,\n  DJ: 6,\n  DK: 1,\n  DZ: 6,\n  EC: 1,\n  EE: 1,\n  EG: 6,\n  ES: 1,\n  FI: 1,\n  FJ: 1,\n  FO: 1,\n  FR: 1,\n  GB: 1,\n  GE: 1,\n  GF: 1,\n  GP: 1,\n  GR: 1,\n  HR: 1,\n  HU: 1,\n  IE: 1,\n  IQ: 6,\n  IR: 6,\n  IS: 1,\n  IT: 1,\n  JO: 6,\n  KG: 1,\n  KW: 6,\n  KZ: 1,\n  LB: 1,\n  LI: 1,\n  LK: 1,\n  LT: 1,\n  LU: 1,\n  LV: 1,\n  LY: 6,\n  MC: 1,\n  MD: 1,\n  ME: 1,\n  MK: 1,\n  MN: 1,\n  MQ: 1,\n  MV: 5,\n  MY: 1,\n  NL: 1,\n  NO: 1,\n  NZ: 1,\n  OM: 6,\n  PL: 1,\n  QA: 6,\n  RE: 1,\n  RO: 1,\n  RS: 1,\n  RU: 1,\n  SD: 6,\n  SE: 1,\n  SI: 1,\n  SK: 1,\n  SM: 1,\n  SY: 6,\n  TJ: 1,\n  TM: 1,\n  TR: 1,\n  UA: 1,\n  UY: 1,\n  UZ: 1,\n  VA: 1,\n  VN: 1,\n  XK: 1\n};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyCalendarDate, AnyTime} from './types';\nimport {CalendarDate, CalendarDateTime, ZonedDateTime} from './CalendarDate';\nimport {fromAbsolute, toAbsolute, toCalendar, toCalendarDate} from './conversion';\nimport {weekStartData} from './weekStartData';\n\ntype DateValue = CalendarDate | CalendarDateTime | ZonedDateTime;\n\n/** Returns whether the given dates occur on the same day, regardless of the time or calendar system. */\nexport function isSameDay(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\n/** Returns whether the given dates occur in the same month, using the calendar system of the first date. */\nexport function isSameMonth(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  // In the Japanese calendar, months can span multiple eras/years, so only compare the first of the month.\n  a = startOfMonth(a);\n  b = startOfMonth(b);\n  return a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\n/** Returns whether the given dates occur in the same year, using the calendar system of the first date. */\nexport function isSameYear(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  a = startOfYear(a);\n  b = startOfYear(b);\n  return a.era === b.era && a.year === b.year;\n}\n\n/** Returns whether the given dates occur on the same day, and are of the same calendar system. */\nexport function isEqualDay(a: DateValue, b: DateValue): boolean {\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\n/** Returns whether the given dates occur in the same month, and are of the same calendar system. */\nexport function isEqualMonth(a: DateValue, b: DateValue): boolean {\n  a = startOfMonth(a);\n  b = startOfMonth(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\n/** Returns whether the given dates occur in the same year, and are of the same calendar system. */\nexport function isEqualYear(a: DateValue, b: DateValue): boolean {\n  a = startOfYear(a);\n  b = startOfYear(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year;\n}\n\n/** Returns whether the date is today in the given time zone. */\nexport function isToday(date: DateValue, timeZone: string): boolean {\n  return isSameDay(date, today(timeZone));\n}\n\n/**\n * Returns the day of week for the given date and locale. Days are numbered from zero to six,\n * where zero is the first day of the week in the given locale. For example, in the United States,\n * the first day of the week is Sunday, but in France it is Monday.\n */\nexport function getDayOfWeek(date: DateValue, locale: string): number {\n  let julian = date.calendar.toJulianDay(date);\n\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  let dayOfWeek = Math.ceil(julian + 1 - getWeekStart(locale)) % 7;\n  if (dayOfWeek < 0) {\n    dayOfWeek += 7;\n  }\n\n  return dayOfWeek;\n}\n\n/** Returns the current time in the given time zone. */\nexport function now(timeZone: string): ZonedDateTime {\n  return fromAbsolute(Date.now(), timeZone);\n}\n\n/** Returns today's date in the given time zone. */\nexport function today(timeZone: string): CalendarDate {\n  return toCalendarDate(now(timeZone));\n}\n\nexport function compareDate(a: AnyCalendarDate, b: AnyCalendarDate): number {\n  return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);\n}\n\nexport function compareTime(a: AnyTime, b: AnyTime): number {\n  return timeToMs(a) - timeToMs(b);\n}\n\nfunction timeToMs(a: AnyTime): number {\n  return a.hour * 60 * 60 * 1000 + a.minute * 60 * 1000 + a.second * 1000 + a.millisecond;\n}\n\n/**\n * Returns the number of hours in the given date and time zone.\n * Usually this is 24, but it could be 23 or 25 if the date is on a daylight saving transition.\n */\nexport function getHoursInDay(a: CalendarDate, timeZone: string): number {\n  let ms = toAbsolute(a, timeZone);\n  let tomorrow = a.add({days: 1});\n  let tomorrowMs = toAbsolute(tomorrow, timeZone);\n  return (tomorrowMs - ms) / 3600000;\n}\n\nlet localTimeZone = null;\n\n/** Returns the time zone identifier for the current user. */\nexport function getLocalTimeZone(): string {\n  // TODO: invalidate this somehow?\n  if (localTimeZone == null) {\n    localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  }\n\n  return localTimeZone;\n}\n\n/** Returns the first date of the month for the given date. */\nexport function startOfMonth(date: ZonedDateTime): ZonedDateTime;\nexport function startOfMonth(date: CalendarDateTime): CalendarDateTime;\nexport function startOfMonth(date: CalendarDate): CalendarDate;\nexport function startOfMonth(date: DateValue): DateValue;\nexport function startOfMonth(date: DateValue): DateValue {\n  // Use `subtract` instead of `set` so we don't get constrained in an era.\n  return date.subtract({days: date.day - 1});\n}\n\n/** Returns the last date of the month for the given date. */\nexport function endOfMonth(date: ZonedDateTime): ZonedDateTime;\nexport function endOfMonth(date: CalendarDateTime): CalendarDateTime;\nexport function endOfMonth(date: CalendarDate): CalendarDate;\nexport function endOfMonth(date: DateValue): DateValue;\nexport function endOfMonth(date: DateValue): DateValue {\n  return date.add({days: date.calendar.getDaysInMonth(date) - date.day});\n}\n\n/** Returns the first day of the year for the given date. */\nexport function startOfYear(date: ZonedDateTime): ZonedDateTime;\nexport function startOfYear(date: CalendarDateTime): CalendarDateTime;\nexport function startOfYear(date: CalendarDate): CalendarDate;\nexport function startOfYear(date: DateValue): DateValue;\nexport function startOfYear(date: DateValue): DateValue {\n  return startOfMonth(date.subtract({months: date.month - 1}));\n}\n\n/** Returns the last day of the year for the given date. */\nexport function endOfYear(date: ZonedDateTime): ZonedDateTime;\nexport function endOfYear(date: CalendarDateTime): CalendarDateTime;\nexport function endOfYear(date: CalendarDate): CalendarDate;\nexport function endOfYear(date: DateValue): DateValue;\nexport function endOfYear(date: DateValue): DateValue {\n  return endOfMonth(date.add({months: date.calendar.getMonthsInYear(date) - date.month}));\n}\n\nexport function getMinimumMonthInYear(date: AnyCalendarDate) {\n  if (date.calendar.getMinimumMonthInYear) {\n    return date.calendar.getMinimumMonthInYear(date);\n  }\n\n  return 1;\n}\n\nexport function getMinimumDayInMonth(date: AnyCalendarDate) {\n  if (date.calendar.getMinimumDayInMonth) {\n    return date.calendar.getMinimumDayInMonth(date);\n  }\n\n  return 1;\n}\n\n/** Returns the first date of the week for the given date and locale. */\nexport function startOfWeek(date: ZonedDateTime, locale: string): ZonedDateTime;\nexport function startOfWeek(date: CalendarDateTime, locale: string): CalendarDateTime;\nexport function startOfWeek(date: CalendarDate, locale: string): CalendarDate;\nexport function startOfWeek(date: DateValue, locale: string): DateValue;\nexport function startOfWeek(date: DateValue, locale: string): DateValue {\n  let dayOfWeek = getDayOfWeek(date, locale);\n  return date.subtract({days: dayOfWeek});\n}\n\n/** Returns the last date of the week for the given date and locale. */\nexport function endOfWeek(date: ZonedDateTime, locale: string): ZonedDateTime;\nexport function endOfWeek(date: CalendarDateTime, locale: string): CalendarDateTime;\nexport function endOfWeek(date: CalendarDate, locale: string): CalendarDate;\nexport function endOfWeek(date: DateValue, locale: string): DateValue {\n  return startOfWeek(date, locale).add({days: 6});\n}\n\nconst cachedRegions = new Map<string, string>();\n\nfunction getRegion(locale: string) {\n  // If the Intl.Locale API is available, use it to get the region for the locale.\n  // @ts-ignore\n  if (Intl.Locale) {\n    // Constructing an Intl.Locale is expensive, so cache the result.\n    let region = cachedRegions.get(locale);\n    if (!region) {\n      // @ts-ignore\n      region = new Intl.Locale(locale).maximize().region;\n      cachedRegions.set(locale, region);\n    }\n    return region;\n  }\n\n  // If not, just try splitting the string.\n  // If the second part of the locale string is 'u',\n  // then this is a unicode extension, so ignore it.\n  // Otherwise, it should be the region.\n  let part = locale.split('-')[1];\n  return part === 'u' ? null : part;\n}\n\nfunction getWeekStart(locale: string) {\n  // TODO: use Intl.Locale for this once browsers support the weekInfo property\n  // https://github.com/tc39/proposal-intl-locale-info\n  let region = getRegion(locale);\n  return weekStartData[region] || 0;\n}\n\n/** Returns the number of weeks in the given month and locale. */\nexport function getWeeksInMonth(date: DateValue, locale: string): number {\n  let days = date.calendar.getDaysInMonth(date);\n  return Math.ceil((getDayOfWeek(startOfMonth(date), locale) + days) / 7);\n}\n\n/** Returns the lesser of the two provider dates. */\nexport function minDate<A extends DateValue, B extends DateValue>(a: A, b: B): A | B {\n  if (a && b) {\n    return a.compare(b) <= 0 ? a : b;\n  }\n\n  return a || b;\n}\n\n/** Returns the greater of the two provider dates. */\nexport function maxDate<A extends DateValue, B extends DateValue>(a: A, b: B): A | B {\n  if (a && b) {\n    return a.compare(b) >= 0 ? a : b;\n  }\n\n  return a || b;\n}\n\nconst WEEKEND_DATA = {\n  AF: [4, 5],\n  AE: [5, 6],\n  BH: [5, 6],\n  DZ: [5, 6],\n  EG: [5, 6],\n  IL: [5, 6],\n  IQ: [5, 6],\n  IR: [5, 5],\n  JO: [5, 6],\n  KW: [5, 6],\n  LY: [5, 6],\n  OM: [5, 6],\n  QA: [5, 6],\n  SA: [5, 6],\n  SD: [5, 6],\n  SY: [5, 6],\n  YE: [5, 6]\n};\n\n/** Returns whether the given date is on a weekend in the given locale. */\nexport function isWeekend(date: DateValue, locale: string): boolean {\n  let julian = date.calendar.toJulianDay(date);\n\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  let dayOfWeek = Math.ceil(julian + 1) % 7;\n  if (dayOfWeek < 0) {\n    dayOfWeek += 7;\n  }\n\n  let region = getRegion(locale);\n  // Use Intl.Locale for this once weekInfo is supported.\n  // https://github.com/tc39/proposal-intl-locale-info\n  let [start, end] = WEEKEND_DATA[region] || [6, 0];\n  return dayOfWeek === start || dayOfWeek === end;\n}\n\n/** Returns whether the given date is on a weekday in the given locale. */\nexport function isWeekday(date: DateValue, locale: string): boolean {\n  return !isWeekend(date, locale);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CalendarDate, CalendarDateTime} from './CalendarDate';\n\nexport type Mutable<T> = {\n  -readonly[P in keyof T]: T[P]\n};\n\nexport function mod(amount: number, numerator: number): number {\n  return amount - numerator * Math.floor(amount / numerator);\n}\n\nexport function copy(date: CalendarDate): Mutable<CalendarDate> {\n  if (date.era) {\n    return new CalendarDate(date.calendar, date.era, date.year, date.month, date.day);\n  } else {\n    return new CalendarDate(date.calendar, date.year, date.month, date.day);\n  }\n}\n\nexport function copyDateTime(date: CalendarDateTime): Mutable<CalendarDateTime> {\n  if (date.era) {\n    return new CalendarDateTime(date.calendar, date.era, date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n  } else {\n    return new CalendarDateTime(date.calendar, date.year, date.month, date.day, date.hour, date.minute, date.second);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod, Mutable} from '../utils';\n\nconst EPOCH = 1721426; // 001/01/03 Julian C.E.\nexport function gregorianToJulianDay(era: string, year: number, month: number, day: number): number {\n  year = getExtendedYear(era, year);\n\n  let y1 = year - 1;\n  let monthOffset = -2;\n  if (month <= 2) {\n    monthOffset = 0;\n  } else if (isLeapYear(year)) {\n    monthOffset = -1;\n  }\n\n  return (\n    EPOCH -\n    1 +\n    365 * y1 +\n    Math.floor(y1 / 4) -\n    Math.floor(y1 / 100) +\n    Math.floor(y1 / 400) +\n    Math.floor((367 * month - 362) / 12 + monthOffset + day)\n  );\n}\n\nexport function isLeapYear(year: number): boolean {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\nexport function getExtendedYear(era: string, year: number): number {\n  return era === 'BC' ? 1 - year : year;\n}\n\nexport function fromExtendedYear(year: number): [string, number] {\n  let era = 'AD';\n  if (year <= 0) {\n    era = 'BC';\n    year = 1 - year;\n  }\n\n  return [era, year];\n}\n\nconst daysInMonth = {\n  standard: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  leapyear: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n};\n\n/**\n * The Gregorian calendar is the most commonly used calendar system in the world. It supports two eras: BC, and AD.\n * Years always contain 12 months, and 365 or 366 days depending on whether it is a leap year.\n */\nexport class GregorianCalendar implements Calendar {\n  identifier = 'gregory';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let jd0 = jd;\n    let depoch = jd0 - EPOCH;\n    let quadricent = Math.floor(depoch / 146097);\n    let dqc = mod(depoch, 146097);\n    let cent = Math.floor(dqc / 36524);\n    let dcent = mod(dqc, 36524);\n    let quad = Math.floor(dcent / 1461);\n    let dquad = mod(dcent, 1461);\n    let yindex = Math.floor(dquad / 365);\n\n    let extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);\n    let [era, year] = fromExtendedYear(extendedYear);\n    let yearDay = jd0 - gregorianToJulianDay(era, year, 1, 1);\n    let leapAdj = 2;\n    if (jd0 < gregorianToJulianDay(era, year, 3, 1)) {\n      leapAdj = 0;\n    } else if (isLeapYear(year)) {\n      leapAdj = 1;\n    }\n    let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);\n    let day = jd0 - gregorianToJulianDay(era, year, month, 1) + 1;\n\n    return new CalendarDate(era, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    return gregorianToJulianDay(date.era, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return daysInMonth[isLeapYear(date.year) ? 'leapyear' : 'standard'][date.month - 1];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getMonthsInYear(date: AnyCalendarDate): number {\n    return 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 366 : 365;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getYearsInEra(date: AnyCalendarDate): number {\n    return 9999;\n  }\n\n  getEras() {\n    return ['BC', 'AD'];\n  }\n\n  getYearsToAdd(date: Mutable<AnyCalendarDate>, years: number) {\n    return date.era === 'BC' ? -years : years;\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    if (date.year <= 0) {\n      date.era = date.era === 'BC' ? 'AD' : 'BC';\n      date.year = 1 - date.year;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, AnyDateTime, AnyTime, Calendar, DateFields, Disambiguation, TimeFields} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {getLocalTimeZone} from './queries';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {Mutable} from './utils';\n\nexport function epochFromDate(date: AnyDateTime) {\n  date = toCalendar(date, new GregorianCalendar());\n  return epochFromParts(date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n}\n\nfunction epochFromParts(year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number) {\n  // Note: Date.UTC() interprets one and two-digit years as being in the\n  // 20th century, so don't use it\n  let date = new Date();\n  date.setUTCHours(hour, minute, second, millisecond);\n  date.setUTCFullYear(year, month - 1, day);\n  return date.getTime();\n}\n\nexport function getTimeZoneOffset(ms: number, timeZone: string) {\n  // Fast path: for local timezone, use native Date.\n  if (timeZone === getLocalTimeZone()) {\n    return new Date(ms).getTimezoneOffset() * -60 * 1000;\n  }\n\n  let {year, month, day, hour, minute, second} = getTimeZoneParts(ms, timeZone);\n  let utc = epochFromParts(year, month, day, hour, minute, second, 0);\n  return utc - Math.floor(ms / 1000) * 1000;\n}\n\nconst formattersByTimeZone = new Map<string, Intl.DateTimeFormat>();\n\nfunction getTimeZoneParts(ms: number, timeZone: string) {\n  let formatter = formattersByTimeZone.get(timeZone);\n  if (!formatter) {\n    formatter = new Intl.DateTimeFormat('en-US', {\n      timeZone,\n      hour12: false,\n      era: 'short',\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric'\n    });\n\n    formattersByTimeZone.set(timeZone, formatter);\n  }\n\n  let parts = formatter.formatToParts(new Date(ms));\n  let namedParts: {[name: string]: string} = {};\n  for (let part of parts) {\n    if (part.type !== 'literal') {\n      namedParts[part.type] = part.value;\n    }\n  }\n\n  return {\n    year: namedParts.era === 'BC' ? -namedParts.year + 1 : +namedParts.year,\n    month: +namedParts.month,\n    day: +namedParts.day,\n    hour: namedParts.hour === '24' ? 0 : +namedParts.hour, // bugs.chromium.org/p/chromium/issues/detail?id=1045791\n    minute: +namedParts.minute,\n    second: +namedParts.second\n  };\n}\n\nconst DAYMILLIS = 86400000;\n\nexport function possibleAbsolutes(date: CalendarDateTime, timeZone: string): number[] {\n  let ms = epochFromDate(date);\n  let earlier = ms - getTimeZoneOffset(ms - DAYMILLIS, timeZone);\n  let later = ms - getTimeZoneOffset(ms + DAYMILLIS, timeZone);\n  return getValidWallTimes(date, timeZone, earlier, later);\n}\n\nfunction getValidWallTimes(date: CalendarDateTime, timeZone: string, earlier: number, later: number): number[] {\n  let found = earlier === later ? [earlier] : [earlier, later];\n  return found.filter(absolute => isValidWallTime(date, timeZone, absolute));\n}\n\nfunction isValidWallTime(date: CalendarDateTime, timeZone: string, absolute: number) {\n  let parts = getTimeZoneParts(absolute, timeZone);\n  return date.year === parts.year\n    && date.month === parts.month\n    && date.day === parts.day\n    && date.hour === parts.hour\n    && date.minute === parts.minute\n    && date.second === parts.second;\n}\n\nexport function toAbsolute(date: CalendarDate | CalendarDateTime, timeZone: string, disambiguation: Disambiguation = 'compatible'): number {\n  let dateTime = toCalendarDateTime(date);\n\n  // Fast path: if the time zone is the local timezone and disambiguation is compatible, use native Date.\n  if (timeZone === getLocalTimeZone() && disambiguation === 'compatible') {\n    dateTime = toCalendar(dateTime, new GregorianCalendar());\n\n    // Don't use Date constructor here because two-digit years are interpreted in the 20th century.\n    let date = new Date();\n    date.setFullYear(dateTime.year, dateTime.month - 1, dateTime.day);\n    date.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n    return date.getTime();\n  }\n\n  let ms = epochFromDate(dateTime);\n  let offsetBefore = getTimeZoneOffset(ms - DAYMILLIS, timeZone);\n  let offsetAfter = getTimeZoneOffset(ms + DAYMILLIS, timeZone);\n  let valid = getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);\n\n  if (valid.length === 1) {\n    return valid[0];\n  }\n\n  if (valid.length > 1) {\n    switch (disambiguation) {\n      // 'compatible' means 'earlier' for \"fall back\" transitions\n      case 'compatible':\n      case 'earlier':\n        return valid[0];\n      case 'later':\n        return valid[valid.length - 1];\n      case 'reject':\n        throw new RangeError('Multiple possible absolute times found');\n    }\n  }\n\n  switch (disambiguation) {\n    case 'earlier':\n      return Math.min(ms - offsetBefore, ms - offsetAfter);\n    // 'compatible' means 'later' for \"spring forward\" transitions\n    case 'compatible':\n    case 'later':\n      return Math.max(ms - offsetBefore, ms - offsetAfter);\n    case 'reject':\n      throw new RangeError('No such absolute time found');\n  }\n}\n\nexport function toDate(dateTime: CalendarDate | CalendarDateTime, timeZone: string, disambiguation: Disambiguation = 'compatible'): Date {\n  return new Date(toAbsolute(dateTime, timeZone, disambiguation));\n}\n\nexport function fromAbsolute(ms: number, timeZone: string): ZonedDateTime {\n  let offset = getTimeZoneOffset(ms, timeZone);\n  let date = new Date(ms + offset);\n  let year = date.getUTCFullYear();\n  let month = date.getUTCMonth() + 1;\n  let day = date.getUTCDate();\n  let hour = date.getUTCHours();\n  let minute = date.getUTCMinutes();\n  let second = date.getUTCSeconds();\n  let millisecond = date.getUTCMilliseconds();\n\n  return new ZonedDateTime(year, month, day, timeZone, offset, hour, minute, second, millisecond);\n}\n\nexport function fromDate(date: Date, timeZone: string): ZonedDateTime {\n  return fromAbsolute(date.getTime(), timeZone);\n}\n\nexport function fromDateToLocal(date: Date): ZonedDateTime {\n  return fromDate(date, getLocalTimeZone());\n}\n\n/** Converts a value with date components such as a `CalendarDateTime` or `ZonedDateTime` into a `CalendarDate`. */\nexport function toCalendarDate(dateTime: AnyCalendarDate): CalendarDate {\n  return new CalendarDate(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);\n}\n\nexport function toDateFields(date: AnyCalendarDate): DateFields {\n  return {\n    era: date.era,\n    year: date.year,\n    month: date.month,\n    day: date.day\n  };\n}\n\nexport function toTimeFields(date: AnyTime): TimeFields {\n  return {\n    hour: date.hour,\n    minute: date.minute,\n    second: date.second,\n    millisecond: date.millisecond\n  };\n}\n\n/**\n * Converts a date value to a `CalendarDateTime`. An optional `Time` value can be passed to set the time\n * of the resulting value, otherwise it will default to midnight.\n */\nexport function toCalendarDateTime(date: CalendarDate | CalendarDateTime | ZonedDateTime, time?: AnyTime): CalendarDateTime {\n  let hour = 0, minute = 0, second = 0, millisecond = 0;\n  if ('timeZone' in date) {\n    ({hour, minute, second, millisecond} = date);\n  } else if ('hour' in date && !time) {\n    return date;\n  }\n\n  if (time) {\n    ({hour, minute, second, millisecond} = time);\n  }\n\n  return new CalendarDateTime(\n    date.calendar,\n    date.era,\n    date.year,\n    date.month,\n    date.day,\n    hour,\n    minute,\n    second,\n    millisecond\n  );\n}\n\n/** Extracts the time components from a value containing a date and time. */\nexport function toTime(dateTime: CalendarDateTime | ZonedDateTime): Time {\n  return new Time(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n}\n\n/** Converts a date from one calendar system to another. */\nexport function toCalendar<T extends AnyCalendarDate>(date: T, calendar: Calendar): T {\n  if (date.calendar.identifier === calendar.identifier) {\n    return date;\n  }\n\n  let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));\n  let copy: Mutable<T> = date.copy();\n  copy.calendar = calendar;\n  copy.era = calendarDate.era;\n  copy.year = calendarDate.year;\n  copy.month = calendarDate.month;\n  copy.day = calendarDate.day;\n  return copy;\n}\n\n/**\n * Converts a date value to a `ZonedDateTime` in the provided time zone. The `disambiguation` option can be set\n * to control how values that fall on daylight saving time changes are interpreted.\n */\nexport function toZoned(date: CalendarDate | CalendarDateTime | ZonedDateTime, timeZone: string, disambiguation?: Disambiguation): ZonedDateTime {\n  if (date instanceof ZonedDateTime) {\n    if (date.timeZone === timeZone) {\n      return date;\n    }\n\n    return toTimeZone(date, timeZone);\n  }\n\n  let ms = toAbsolute(date, timeZone, disambiguation);\n  return fromAbsolute(ms, timeZone);\n}\n\nexport function zonedToDate(date: ZonedDateTime) {\n  let ms = epochFromDate(date) - date.offset;\n  return new Date(ms);\n}\n\n/** Converts a `ZonedDateTime` from one time zone to another. */\nexport function toTimeZone(date: ZonedDateTime, timeZone: string): ZonedDateTime {\n  let ms = epochFromDate(date) - date.offset;\n  return toCalendar(fromAbsolute(ms, timeZone), date.calendar);\n}\n\n/** Converts the given `ZonedDateTime` into the user's local time zone. */\nexport function toLocalTimeZone(date: ZonedDateTime): ZonedDateTime {\n  return toTimeZone(date, getLocalTimeZone());\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyCalendarDate, AnyTime, CycleOptions, CycleTimeOptions, DateDuration, DateField, DateFields, DateTimeDuration, Disambiguation, TimeDuration, TimeField, TimeFields} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {epochFromDate, fromAbsolute, toAbsolute, toCalendar, toCalendarDateTime} from './conversion';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {Mutable} from './utils';\n\nconst ONE_HOUR = 3600000;\n\nexport function add(date: CalendarDateTime, duration: DateTimeDuration): CalendarDateTime;\nexport function add(date: CalendarDate, duration: DateDuration): CalendarDate;\nexport function add(date: CalendarDate | CalendarDateTime, duration: DateTimeDuration): CalendarDate | CalendarDateTime;\nexport function add(date: CalendarDate | CalendarDateTime, duration: DateTimeDuration) {\n  let mutableDate: Mutable<AnyCalendarDate> = date.copy();\n  let days = 'hour' in date ? addTimeFields(date, duration) : 0;\n\n  addYears(mutableDate, duration.years || 0);\n  if (mutableDate.calendar.balanceYearMonth) {\n    mutableDate.calendar.balanceYearMonth(mutableDate, date);\n  }\n\n  mutableDate.month += duration.months || 0;\n\n  balanceYearMonth(mutableDate);\n  constrainMonthDay(mutableDate);\n\n  mutableDate.day += (duration.weeks || 0) * 7;\n  mutableDate.day += duration.days || 0;\n  mutableDate.day += days;\n\n  balanceDay(mutableDate);\n\n  if (mutableDate.calendar.balanceDate) {\n    mutableDate.calendar.balanceDate(mutableDate);\n  }\n\n  return mutableDate;\n}\n\nfunction addYears(date: Mutable<AnyCalendarDate>, years: number) {\n  if (date.calendar.getYearsToAdd) {\n    years = date.calendar.getYearsToAdd(date, years);\n  }\n\n  date.year += years;\n}\n\nfunction balanceYearMonth(date: Mutable<AnyCalendarDate>) {\n  while (date.month < 1) {\n    addYears(date, -1);\n    date.month += date.calendar.getMonthsInYear(date);\n  }\n\n  let monthsInYear = 0;\n  while (date.month > (monthsInYear = date.calendar.getMonthsInYear(date))) {\n    date.month -= monthsInYear;\n    addYears(date, 1);\n  }\n}\n\nfunction balanceDay(date: Mutable<AnyCalendarDate>) {\n  while (date.day < 1) {\n    date.month--;\n    balanceYearMonth(date);\n    date.day += date.calendar.getDaysInMonth(date);\n  }\n\n  while (date.day > date.calendar.getDaysInMonth(date)) {\n    date.day -= date.calendar.getDaysInMonth(date);\n    date.month++;\n    balanceYearMonth(date);\n  }\n}\n\nfunction constrainMonthDay(date: Mutable<AnyCalendarDate>) {\n  date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));\n  date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));\n}\n\nexport function constrain(date: Mutable<AnyCalendarDate>) {\n  if (date.calendar.constrainDate) {\n    date.calendar.constrainDate(date);\n  }\n\n  date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));\n  constrainMonthDay(date);\n}\n\nexport function invertDuration(duration: DateTimeDuration): DateTimeDuration {\n  let inverseDuration = {};\n  for (let key in duration) {\n    if (typeof duration[key] === 'number') {\n      inverseDuration[key] = -duration[key];\n    }\n  }\n\n  return inverseDuration;\n}\n\nexport function subtract(date: CalendarDateTime, duration: DateTimeDuration): CalendarDateTime;\nexport function subtract(date: CalendarDate, duration: DateDuration): CalendarDate;\nexport function subtract(date: CalendarDate | CalendarDateTime, duration: DateTimeDuration): CalendarDate | CalendarDateTime {\n  return add(date, invertDuration(duration));\n}\n\nexport function set(date: CalendarDateTime, fields: DateFields): CalendarDateTime;\nexport function set(date: CalendarDate, fields: DateFields): CalendarDate;\nexport function set(date: CalendarDate | CalendarDateTime, fields: DateFields) {\n  let mutableDate: Mutable<AnyCalendarDate> = date.copy();\n\n  if (fields.era != null) {\n    mutableDate.era = fields.era;\n  }\n\n  if (fields.year != null) {\n    mutableDate.year = fields.year;\n  }\n\n  if (fields.month != null) {\n    mutableDate.month = fields.month;\n  }\n\n  if (fields.day != null) {\n    mutableDate.day = fields.day;\n  }\n\n  constrain(mutableDate);\n  return mutableDate;\n}\n\nexport function setTime(value: CalendarDateTime, fields: TimeFields): CalendarDateTime;\nexport function setTime(value: Time, fields: TimeFields): Time;\nexport function setTime(value: Time | CalendarDateTime, fields: TimeFields) {\n  let mutableValue: Mutable<Time | CalendarDateTime> = value.copy();\n\n  if (fields.hour != null) {\n    mutableValue.hour = fields.hour;\n  }\n\n  if (fields.minute != null) {\n    mutableValue.minute = fields.minute;\n  }\n\n  if (fields.second != null) {\n    mutableValue.second = fields.second;\n  }\n\n  if (fields.millisecond != null) {\n    mutableValue.millisecond = fields.millisecond;\n  }\n\n  constrainTime(mutableValue);\n  return mutableValue;\n}\n\nfunction balanceTime(time: Mutable<AnyTime>): number {\n  time.second += Math.floor(time.millisecond / 1000);\n  time.millisecond = nonNegativeMod(time.millisecond, 1000);\n\n  time.minute += Math.floor(time.second / 60);\n  time.second = nonNegativeMod(time.second, 60);\n\n  time.hour += Math.floor(time.minute / 60);\n  time.minute = nonNegativeMod(time.minute, 60);\n\n  let days = Math.floor(time.hour / 24);\n  time.hour = nonNegativeMod(time.hour, 24);\n\n  return days;\n}\n\nexport function constrainTime(time: Mutable<AnyTime>) {\n  time.millisecond = Math.max(0, Math.min(time.millisecond, 1000));\n  time.second = Math.max(0, Math.min(time.second, 59));\n  time.minute = Math.max(0, Math.min(time.minute, 59));\n  time.hour = Math.max(0, Math.min(time.hour, 23));\n}\n\nfunction nonNegativeMod(a: number, b: number) {\n  let result = a % b;\n  if (result < 0) {\n    result += b;\n  }\n  return result;\n}\n\nfunction addTimeFields(time: Mutable<AnyTime>, duration: TimeDuration): number {\n  time.hour += duration.hours || 0;\n  time.minute += duration.minutes || 0;\n  time.second += duration.seconds || 0;\n  time.millisecond += duration.milliseconds || 0;\n  return balanceTime(time);\n}\n\nexport function addTime(time: Time, duration: TimeDuration): Time {\n  let res = time.copy();\n  addTimeFields(res, duration);\n  return res;\n}\n\nexport function subtractTime(time: Time, duration: TimeDuration): Time {\n  return addTime(time, invertDuration(duration));\n}\n\nexport function cycleDate(value: CalendarDateTime, field: DateField, amount: number, options?: CycleOptions): CalendarDateTime;\nexport function cycleDate(value: CalendarDate, field: DateField, amount: number, options?: CycleOptions): CalendarDate;\nexport function cycleDate(value: CalendarDate | CalendarDateTime, field: DateField, amount: number, options?: CycleOptions) {\n  let mutable: Mutable<CalendarDate | CalendarDateTime> = value.copy();\n\n  switch (field) {\n    case 'era': {\n      let eras = value.calendar.getEras();\n      let eraIndex = eras.indexOf(value.era);\n      if (eraIndex < 0) {\n        throw new Error('Invalid era: ' + value.era);\n      }\n      eraIndex = cycleValue(eraIndex, amount, 0, eras.length - 1, options?.round);\n      mutable.era = eras[eraIndex];\n\n      // Constrain the year and other fields within the era, so the era doesn't change when we balance below.\n      constrain(mutable);\n      break;\n    }\n    case 'year': {\n      if (mutable.calendar.getYearsToAdd) {\n        amount = mutable.calendar.getYearsToAdd(mutable, amount);\n      }\n\n      // The year field should not cycle within the era as that can cause weird behavior affecting other fields.\n      // We need to also allow values < 1 so that decrementing goes to the previous era. If we get -Infinity back\n      // we know we wrapped around after reaching 9999 (the maximum), so set the year back to 1.\n      mutable.year = cycleValue(value.year, amount, -Infinity, 9999, options?.round);\n      if (mutable.year === -Infinity) {\n        mutable.year = 1;\n      }\n\n      if (mutable.calendar.balanceYearMonth) {\n        mutable.calendar.balanceYearMonth(mutable, value);\n      }\n      break;\n    }\n    case 'month':\n      mutable.month = cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options?.round);\n      break;\n    case 'day':\n      mutable.day = cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options?.round);\n      break;\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n\n  if (value.calendar.balanceDate) {\n    value.calendar.balanceDate(mutable);\n  }\n\n  constrain(mutable);\n  return mutable;\n}\n\nexport function cycleTime(value: CalendarDateTime, field: TimeField, amount: number, options?: CycleTimeOptions): CalendarDateTime;\nexport function cycleTime(value: Time, field: TimeField, amount: number, options?: CycleTimeOptions): Time;\nexport function cycleTime(value: Time | CalendarDateTime, field: TimeField, amount: number, options?: CycleTimeOptions) {\n  let mutable: Mutable<Time | CalendarDateTime> = value.copy();\n\n  switch (field) {\n    case 'hour': {\n      let hours = value.hour;\n      let min = 0;\n      let max = 23;\n      if (options?.hourCycle === 12) {\n        let isPM = hours >= 12;\n        min = isPM ? 12 : 0;\n        max = isPM ? 23 : 11;\n      }\n      mutable.hour = cycleValue(hours, amount, min, max, options?.round);\n      break;\n    }\n    case 'minute':\n      mutable.minute = cycleValue(value.minute, amount, 0, 59, options?.round);\n      break;\n    case 'second':\n      mutable.second = cycleValue(value.second, amount, 0, 59, options?.round);\n      break;\n    case 'millisecond':\n      mutable.millisecond = cycleValue(value.millisecond, amount, 0, 999, options?.round);\n      break;\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n\n  return mutable;\n}\n\nfunction cycleValue(value: number, amount: number, min: number, max: number, round = false) {\n  if (round) {\n    value += Math.sign(amount);\n\n    if (value < min) {\n      value = max;\n    }\n\n    let div = Math.abs(amount);\n    if (amount > 0) {\n      value = Math.ceil(value / div) * div;\n    } else {\n      value = Math.floor(value / div) * div;\n    }\n\n    if (value > max) {\n      value = min;\n    }\n  } else {\n    value += amount;\n    if (value < min) {\n      value = max - (min - value - 1);\n    } else if (value > max) {\n      value = min + (value - max - 1);\n    }\n  }\n\n  return value;\n}\n\nexport function addZoned(dateTime: ZonedDateTime, duration: DateTimeDuration): ZonedDateTime {\n  let ms: number;\n  if ((duration.years != null && duration.years !== 0) || (duration.months != null && duration.months !== 0) || (duration.days != null && duration.days !== 0)) {\n    let res = add(toCalendarDateTime(dateTime), {\n      years: duration.years,\n      months: duration.months,\n      days: duration.days\n    });\n\n    // Changing the date may change the timezone offset, so we need to recompute\n    // using the 'compatible' disambiguation.\n    ms = toAbsolute(res, dateTime.timeZone);\n  } else {\n    // Otherwise, preserve the offset of the original date.\n    ms = epochFromDate(dateTime) - dateTime.offset;\n  }\n\n  // Perform time manipulation in milliseconds rather than on the original time fields to account for DST.\n  // For example, adding one hour during a DST transition may result in the hour field staying the same or\n  // skipping an hour. This results in the offset field changing value instead of the specified field.\n  ms += duration.milliseconds || 0;\n  ms += (duration.seconds || 0) * 1000;\n  ms += (duration.minutes || 0) * 60 * 1000;\n  ms += (duration.hours || 0) * 60 * 60 * 1000;\n\n  let res = fromAbsolute(ms, dateTime.timeZone);\n  return toCalendar(res, dateTime.calendar);\n}\n\nexport function subtractZoned(dateTime: ZonedDateTime, duration: DateTimeDuration): ZonedDateTime {\n  return addZoned(dateTime, invertDuration(duration));\n}\n\nexport function cycleZoned(dateTime: ZonedDateTime, field: DateField | TimeField, amount: number, options?: CycleTimeOptions): ZonedDateTime {\n  // For date fields, we want the time to remain consistent and the UTC offset to potentially change to account for DST changes.\n  // For time fields, we want the time to change by the amount given. This may result in the hour field staying the same, but the UTC\n  // offset changing in the case of a backward DST transition, or skipping an hour in the case of a forward DST transition.\n  switch (field) {\n    case 'hour': {\n      let min = 0;\n      let max = 23;\n      if (options?.hourCycle === 12) {\n        let isPM = dateTime.hour >= 12;\n        min = isPM ? 12 : 0;\n        max = isPM ? 23 : 11;\n      }\n\n      // The minimum and maximum hour may be affected by daylight saving time.\n      // For example, it might jump forward at midnight, and skip 1am.\n      // Or it might end at midnight and repeat the 11pm hour. To handle this, we get\n      // the possible absolute times for the min and max, and find the maximum range\n      // that is within the current day.\n      let plainDateTime = toCalendarDateTime(dateTime);\n      let minDate = toCalendar(setTime(plainDateTime, {hour: min}), new GregorianCalendar());\n      let minAbsolute = [toAbsolute(minDate, dateTime.timeZone, 'earlier'), toAbsolute(minDate, dateTime.timeZone, 'later')]\n        .filter(ms => fromAbsolute(ms, dateTime.timeZone).day === minDate.day)[0];\n\n      let maxDate = toCalendar(setTime(plainDateTime, {hour: max}), new GregorianCalendar());\n      let maxAbsolute = [toAbsolute(maxDate, dateTime.timeZone, 'earlier'), toAbsolute(maxDate, dateTime.timeZone, 'later')]\n        .filter(ms => fromAbsolute(ms, dateTime.timeZone).day === maxDate.day).pop();\n\n      // Since hours may repeat, we need to operate on the absolute time in milliseconds.\n      // This is done in hours from the Unix epoch so that cycleValue works correctly,\n      // and then converted back to milliseconds.\n      let ms = epochFromDate(dateTime) - dateTime.offset;\n      let hours = Math.floor(ms / ONE_HOUR);\n      let remainder = ms % ONE_HOUR;\n      ms = cycleValue(\n        hours,\n        amount,\n        Math.floor(minAbsolute / ONE_HOUR),\n        Math.floor(maxAbsolute / ONE_HOUR),\n        options?.round\n      ) * ONE_HOUR + remainder;\n\n      // Now compute the new timezone offset, and convert the absolute time back to local time.\n      return toCalendar(fromAbsolute(ms, dateTime.timeZone), dateTime.calendar);\n    }\n    case 'minute':\n    case 'second':\n    case 'millisecond':\n      // @ts-ignore\n      return cycleTime(dateTime, field, amount, options);\n    case 'era':\n    case 'year':\n    case 'month':\n    case 'day': {\n      let res = cycleDate(toCalendarDateTime(dateTime), field, amount, options);\n      let ms = toAbsolute(res, dateTime.timeZone);\n      return toCalendar(fromAbsolute(ms, dateTime.timeZone), dateTime.calendar);\n    }\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n}\n\nexport function setZoned(dateTime: ZonedDateTime, fields: DateFields & TimeFields, disambiguation?: Disambiguation): ZonedDateTime {\n  // Set the date/time fields, and recompute the UTC offset to account for DST changes.\n  // We also need to validate by converting back to a local time in case hours are skipped during forward DST transitions.\n  let plainDateTime = toCalendarDateTime(dateTime);\n  let res = setTime(set(plainDateTime, fields), fields);\n\n  // If the resulting plain date time values are equal, return the original time.\n  // We don't want to change the offset when setting the time to the same value.\n  if (res.compare(plainDateTime) === 0) {\n    return dateTime;\n  }\n\n  let ms = toAbsolute(res, dateTime.timeZone, disambiguation);\n  return toCalendar(fromAbsolute(ms, dateTime.timeZone), dateTime.calendar);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyDateTime, Disambiguation} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {epochFromDate, fromAbsolute, possibleAbsolutes, toAbsolute, toCalendar, toCalendarDateTime, toTimeZone} from './conversion';\nimport {getLocalTimeZone} from './queries';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {Mutable} from './utils';\n\nconst TIME_RE = /^(\\d{2})(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst DATE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\nconst DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst ZONED_DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:([+-]\\d{2})(?::(\\d{2}))?)?\\[(.*?)\\]$/;\nconst ABSOLUTE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:(?:([+-]\\d{2})(?::(\\d{2}))?)|Z)$/;\n\n/** Parses an ISO 8601 time string. */\nexport function parseTime(value: string): Time {\n  let m = value.match(TIME_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 time string: ' + value);\n  }\n\n  return new Time(\n    parseNumber(m[1], 0, 23),\n    m[2] ? parseNumber(m[2], 0, 59) : 0,\n    m[3] ? parseNumber(m[3], 0, 59) : 0,\n    m[4] ? parseNumber(m[4], 0, Infinity) * 1000 : 0\n  );\n}\n\n/** Parses an ISO 8601 date string, with no time components. */\nexport function parseDate(value: string): CalendarDate {\n  let m = value.match(DATE_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date string: ' + value);\n  }\n\n  let date: Mutable<CalendarDate> = new CalendarDate(\n    parseNumber(m[1], 0, 9999),\n    parseNumber(m[2], 1, 12),\n    1\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date as CalendarDate;\n}\n\n/** Parses an ISO 8601 date and time string, with no time zone. */\nexport function parseDateTime(value: string): CalendarDateTime {\n  let m = value.match(DATE_TIME_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date time string: ' + value);\n  }\n\n  let date: Mutable<CalendarDateTime> = new CalendarDateTime(\n    parseNumber(m[1], 1, 9999),\n    parseNumber(m[2], 1, 12),\n    1,\n    m[4] ? parseNumber(m[4], 0, 23) : 0,\n    m[5] ? parseNumber(m[5], 0, 59) : 0,\n    m[6] ? parseNumber(m[6], 0, 59) : 0,\n    m[7] ? parseNumber(m[7], 0, Infinity) * 1000 : 0\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date as CalendarDateTime;\n}\n\n/**\n * Parses an ISO 8601 date and time string with a time zone extension and optional UTC offset\n * (e.g. \"2021-11-07T00:45[America/Los_Angeles]\" or \"2021-11-07T00:45-07:00[America/Los_Angeles]\").\n * Ambiguous times due to daylight saving time transitions are resolved according to the `disambiguation`\n * parameter.\n */\nexport function parseZonedDateTime(value: string, disambiguation?: Disambiguation): ZonedDateTime {\n  let m = value.match(ZONED_DATE_TIME_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date time string: ' + value);\n  }\n\n  let date: Mutable<ZonedDateTime> = new ZonedDateTime(\n    parseNumber(m[1], 1, 9999),\n    parseNumber(m[2], 1, 12),\n    1,\n    m[10],\n    0,\n    m[4] ? parseNumber(m[4], 0, 23) : 0,\n    m[5] ? parseNumber(m[5], 0, 59) : 0,\n    m[6] ? parseNumber(m[6], 0, 59) : 0,\n    m[7] ? parseNumber(m[7], 0, Infinity) * 1000 : 0\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n\n  let plainDateTime = toCalendarDateTime(date as ZonedDateTime);\n\n  let ms: number;\n  if (m[8]) {\n    date.offset = parseNumber(m[8], -23, 23) * 60 * 60 * 1000 + parseNumber(m[9] ?? '0', 0, 59) * 60 * 1000;\n    ms = epochFromDate(date as ZonedDateTime) - date.offset;\n\n    // Validate offset against parsed date.\n    let absolutes = possibleAbsolutes(plainDateTime, date.timeZone);\n    if (!absolutes.includes(ms)) {\n      throw new Error(`Offset ${offsetToString(date.offset)} is invalid for ${dateTimeToString(date)} in ${date.timeZone}`);\n    }\n  } else {\n    // Convert to absolute and back to fix invalid times due to DST.\n    ms = toAbsolute(toCalendarDateTime(plainDateTime), date.timeZone, disambiguation);\n  }\n\n  return fromAbsolute(ms, date.timeZone);\n}\n\n/**\n * Parses an ISO 8601 date and time string with a UTC offset (e.g. \"2021-11-07T07:45:00Z\"\n * or \"2021-11-07T07:45:00-07:00\"). The result is converted to the provided time zone.\n */\nexport function parseAbsolute(value: string, timeZone: string): ZonedDateTime {\n  let m = value.match(ABSOLUTE_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date time string: ' + value);\n  }\n\n  let date: Mutable<ZonedDateTime> = new ZonedDateTime(\n    parseNumber(m[1], 1, 9999),\n    parseNumber(m[2], 1, 12),\n    1,\n    timeZone,\n    0,\n    m[4] ? parseNumber(m[4], 0, 23) : 0,\n    m[5] ? parseNumber(m[5], 0, 59) : 0,\n    m[6] ? parseNumber(m[6], 0, 59) : 0,\n    m[7] ? parseNumber(m[7], 0, Infinity) * 1000 : 0\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n\n  if (m[8]) {\n    date.offset = parseNumber(m[8], -23, 23) * 60 * 60 * 1000 + parseNumber(m[9] ?? '0', 0, 59) * 60 * 1000;\n  }\n\n  return toTimeZone(date as ZonedDateTime, timeZone);\n}\n\n/**\n * Parses an ISO 8601 date and time string with a UTC offset (e.g. \"2021-11-07T07:45:00Z\"\n * or \"2021-11-07T07:45:00-07:00\"). The result is converted to the user's local time zone.\n */\nexport function parseAbsoluteToLocal(value: string): ZonedDateTime {\n  return parseAbsolute(value, getLocalTimeZone());\n}\n\nfunction parseNumber(value: string, min: number, max: number) {\n  let val = Number(value);\n  if (val < min || val > max) {\n    throw new RangeError(`Value out of range: ${min} <= ${val} <= ${max}`);\n  }\n\n  return val;\n}\n\nexport function timeToString(time: Time): string {\n  return `${String(time.hour).padStart(2, '0')}:${String(time.minute).padStart(2, '0')}:${String(time.second).padStart(2, '0')}${time.millisecond ? String(time.millisecond / 1000).slice(1) : ''}`;\n}\n\nexport function dateToString(date: CalendarDate): string {\n  let gregorianDate = toCalendar(date, new GregorianCalendar());\n  return `${String(gregorianDate.year).padStart(4, '0')}-${String(gregorianDate.month).padStart(2, '0')}-${String(gregorianDate.day).padStart(2, '0')}`;\n}\n\nexport function dateTimeToString(date: AnyDateTime): string {\n  // @ts-ignore\n  return `${dateToString(date)}T${timeToString(date)}`;\n}\n\nfunction offsetToString(offset: number) {\n  let sign = Math.sign(offset) < 0 ? '-' : '+';\n  offset = Math.abs(offset);\n  let offsetHours = Math.floor(offset / (60 * 60 * 1000));\n  let offsetMinutes = (offset % (60 * 60 * 1000)) / (60 * 1000);\n  return `${sign}${String(offsetHours).padStart(2, '0')}:${String(offsetMinutes).padStart(2, '0')}`;\n}\n\nexport function zonedDateTimeToString(date: ZonedDateTime): string {\n  return `${dateTimeToString(date)}${offsetToString(date.offset)}[${date.timeZone}]`;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {add, addTime, addZoned, constrain, constrainTime, cycleDate, cycleTime, cycleZoned, set, setTime, setZoned, subtract, subtractTime, subtractZoned} from './manipulation';\nimport {AnyCalendarDate, AnyTime, Calendar, CycleOptions, CycleTimeOptions, DateDuration, DateField, DateFields, DateTimeDuration, Disambiguation, TimeDuration, TimeField, TimeFields} from './types';\nimport {compareDate, compareTime} from './queries';\nimport {dateTimeToString, dateToString, timeToString, zonedDateTimeToString} from './string';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {toCalendarDateTime, toDate, toZoned, zonedToDate} from './conversion';\n\nfunction shiftArgs(args: any[]) {\n  let calendar: Calendar = typeof args[0] === 'object'\n    ? args.shift()\n    : new GregorianCalendar();\n\n  let era: string;\n  if (typeof args[0] === 'string') {\n    era = args.shift();\n  } else {\n    let eras = calendar.getEras();\n    era = eras[eras.length - 1];\n  }\n\n  let year = args.shift();\n  let month = args.shift();\n  let day = args.shift();\n\n  return [calendar, era, year, month, day];\n}\n\n/** A CalendarDate represents a date without any time components in a specific calendar system. */\nexport class CalendarDate {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  // i.e. a ZonedDateTime should not be be passable to a parameter that expects CalendarDate.\n  // If that behavior is desired, use the AnyCalendarDate interface instead.\n  #type;\n  /** The calendar system associated with this date, e.g. Gregorian. */\n  public readonly calendar: Calendar;\n  /** The calendar era for this date, e.g. \"BC\" or \"AD\". */\n  public readonly era: string;\n  /** The year of this date within the era. */\n  public readonly year: number;\n  /**\n   * The month number within the year. Note that some calendar systems such as Hebrew\n   * may have a variable number of months per year. Therefore, month numbers may not\n   * always correspond to the same month names in different years.\n   */\n  public readonly month: number;\n  /** The day number within the month. */\n  public readonly day: number;\n\n  constructor(year: number, month: number, day: number);\n  constructor(era: string, year: number, month: number, day: number);\n  constructor(calendar: Calendar, year: number, month: number, day: number);\n  constructor(calendar: Calendar, era: string, year: number, month: number, day: number);\n  constructor(...args: any[]) {\n    let [calendar, era, year, month, day] = shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n\n    constrain(this);\n  }\n\n  /** Returns a copy of this date. */\n  copy(): CalendarDate {\n    if (this.era) {\n      return new CalendarDate(this.calendar, this.era, this.year, this.month, this.day);\n    } else {\n      return new CalendarDate(this.calendar, this.year, this.month, this.day);\n    }\n  }\n\n  /** Returns a new `CalendarDate` with the given duration added to it. */\n  add(duration: DateDuration): CalendarDate {\n    return add(this, duration);\n  }\n\n  /** Returns a new `CalendarDate` with the given duration subtracted from it. */\n  subtract(duration: DateDuration): CalendarDate {\n    return subtract(this, duration);\n  }\n\n  /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: DateFields): CalendarDate {\n    return set(this, fields);\n  }\n\n  /**\n   * Returns a new `CalendarDate` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: DateField, amount: number, options?: CycleOptions): CalendarDate {\n    return cycleDate(this, field, amount, options);\n  }\n\n  /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */\n  toDate(timeZone: string): Date {\n    return toDate(this, timeZone);\n  }\n\n  /** Converts the date to an ISO 8601 formatted string. */\n  toString(): string {\n    return dateToString(this);\n  }\n\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b: AnyCalendarDate): number {\n    return compareDate(this, b);\n  }\n}\n\n/** A Time represents a clock time without any date components. */\nexport class Time {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  #type;\n  /** The hour, numbered from 0 to 23. */\n  public readonly hour: number;\n  /** The minute in the hour. */\n  public readonly minute: number;\n  /** The second in the minute. */\n  public readonly second: number;\n  /** The millisecond in the second. */\n  public readonly millisecond: number;\n\n  constructor(\n    hour: number = 0,\n    minute: number = 0,\n    second: number = 0,\n    millisecond: number = 0\n  ) {\n    this.hour = hour;\n    this.minute = minute;\n    this.second = second;\n    this.millisecond = millisecond;\n    constrainTime(this);\n  }\n\n  /** Returns a copy of this time. */\n  copy(): Time {\n    return new Time(this.hour, this.minute, this.second, this.millisecond);\n  }\n\n  /** Returns a new `Time` with the given duration added to it. */\n  add(duration: TimeDuration) {\n    return addTime(this, duration);\n  }\n\n  /** Returns a new `Time` with the given duration subtracted from it. */\n  subtract(duration: TimeDuration) {\n    return subtractTime(this, duration);\n  }\n\n  /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: TimeFields) {\n    return setTime(this, fields);\n  }\n\n  /**\n   * Returns a new `Time` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: TimeField, amount: number, options?: CycleTimeOptions) {\n    return cycleTime(this, field, amount, options);\n  }\n\n  /** Converts the time to an ISO 8601 formatted string. */\n  toString() {\n    return timeToString(this);\n  }\n\n  /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */\n  compare(b: AnyTime) {\n    return compareTime(this, b);\n  }\n}\n\n/** A CalendarDateTime represents a date and time without a time zone, in a specific calendar system. */\nexport class CalendarDateTime {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  #type;\n  /** The calendar system associated with this date, e.g. Gregorian. */\n  public readonly calendar: Calendar;\n  /** The calendar era for this date, e.g. \"BC\" or \"AD\". */\n  public readonly era: string;\n  /** The year of this date within the era. */\n  public readonly year: number;\n  /**\n   * The month number within the year. Note that some calendar systems such as Hebrew\n   * may have a variable number of months per year. Therefore, month numbers may not\n   * always correspond to the same month names in different years.\n   */\n  public readonly month: number;\n  /** The day number within the month. */\n  public readonly day: number;\n  /** The hour in the day, numbered from 0 to 23. */\n  public readonly hour: number;\n  /** The minute in the hour. */\n  public readonly minute: number;\n  /** The second in the minute. */\n  public readonly second: number;\n  /** The millisecond in the second. */\n  public readonly millisecond: number;\n\n  constructor(year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(...args: any[]) {\n    let [calendar, era, year, month, day] = shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n\n    constrain(this);\n  }\n\n  /** Returns a copy of this date. */\n  copy(): CalendarDateTime {\n    if (this.era) {\n      return new CalendarDateTime(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n    } else {\n      return new CalendarDateTime(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n    }\n  }\n\n  /** Returns a new `CalendarDateTime` with the given duration added to it. */\n  add(duration: DateTimeDuration): CalendarDateTime {\n    return add(this, duration);\n  }\n\n  /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */\n  subtract(duration: DateTimeDuration): CalendarDateTime {\n    return subtract(this, duration);\n  }\n\n  /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: DateFields & TimeFields): CalendarDateTime {\n    return set(setTime(this, fields), fields);\n  }\n\n  /**\n   * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions): CalendarDateTime {\n    switch (field) {\n      case 'era':\n      case 'year':\n      case 'month':\n      case 'day':\n        return cycleDate(this, field, amount, options);\n      default:\n        return cycleTime(this, field, amount, options);\n    }\n  }\n\n  /** Converts the date to a native JavaScript Date object in the given time zone. */\n  toDate(timeZone: string, disambiguation?: Disambiguation): Date {\n    return toDate(this, timeZone, disambiguation);\n  }\n\n  /** Converts the date to an ISO 8601 formatted string. */\n  toString(): string {\n    return dateTimeToString(this);\n  }\n\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b: CalendarDate | CalendarDateTime | ZonedDateTime): number {\n    let res = compareDate(this, b);\n    if (res === 0) {\n      return compareTime(this, toCalendarDateTime(b));\n    }\n\n    return res;\n  }\n}\n\n/** A ZonedDateTime represents a date and time in a specific time zone and calendar system. */\nexport class ZonedDateTime {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  #type;\n  /** The calendar system associated with this date, e.g. Gregorian. */\n  public readonly calendar: Calendar;\n  /** The calendar era for this date, e.g. \"BC\" or \"AD\". */\n  public readonly era: string;\n  /** The year of this date within the era. */\n  public readonly year: number;\n  /**\n   * The month number within the year. Note that some calendar systems such as Hebrew\n   * may have a variable number of months per year. Therefore, month numbers may not\n   * always correspond to the same month names in different years.\n   */\n  public readonly month: number;\n  /** The day number within the month. */\n  public readonly day: number;\n  /** The hour in the day, numbered from 0 to 23. */\n  public readonly hour: number;\n  /** The minute in the hour. */\n  public readonly minute: number;\n  /** The second in the minute. */\n  public readonly second: number;\n  /** The millisecond in the second. */\n  public readonly millisecond: number;\n  /** The IANA time zone identifier that this date and time is represented in. */\n  public readonly timeZone: string;\n  /** The UTC offset for this time, in seconds. */\n  public readonly offset: number;\n\n  constructor(year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(...args: any[]) {\n    let [calendar, era, year, month, day] = shiftArgs(args);\n    let timeZone = args.shift();\n    let offset = args.shift();\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.timeZone = timeZone;\n    this.offset = offset;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n\n    constrain(this);\n  }\n\n  /** Returns a copy of this date. */\n  copy(): ZonedDateTime {\n    if (this.era) {\n      return new ZonedDateTime(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n    } else {\n      return new ZonedDateTime(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n    }\n  }\n\n  /** Returns a new `ZonedDateTime` with the given duration added to it. */\n  add(duration: DateTimeDuration) {\n    return addZoned(this, duration);\n  }\n\n  /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */\n  subtract(duration: DateTimeDuration) {\n    return subtractZoned(this, duration);\n  }\n\n  /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: DateFields & TimeFields, disambiguation?: Disambiguation) {\n    return setZoned(this, fields, disambiguation);\n  }\n\n  /**\n   * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions) {\n    return cycleZoned(this, field, amount, options);\n  }\n\n  /** Converts the date to a native JavaScript Date object. */\n  toDate() {\n    return zonedToDate(this);\n  }\n\n   /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */\n  toString() {\n    return zonedDateTimeToString(this);\n  }\n\n   /** Converts the date to an ISO 8601 formatted string in UTC. */\n  toAbsoluteString() {\n    return this.toDate().toISOString();\n  }\n\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b: CalendarDate | CalendarDateTime | ZonedDateTime) {\n    // TODO: Is this a bad idea??\n    return this.toDate().getTime() - toZoned(b, this.timeZone).toDate().getTime();\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {GregorianCalendar} from './GregorianCalendar';\nimport {Mutable} from '../utils';\n\nconst ERA_START_DATES = [[1868, 9, 8], [1912, 7, 30], [1926, 12, 25], [1989, 1, 8], [2019, 5, 1]];\nconst ERA_END_DATES = [[1912, 7, 29], [1926, 12, 24], [1989, 1, 7], [2019, 4, 30]];\nconst ERA_ADDENDS = [1867, 1911, 1925, 1988, 2018];\nconst ERA_NAMES = ['meiji', 'taisho', 'showa', 'heisei', 'reiwa'];\n\nfunction findEraFromGregorianDate(date: AnyCalendarDate) {\n  const idx = ERA_START_DATES.findIndex(([year, month, day]) => {\n    if (date.year < year) {\n      return true;\n    }\n\n    if (date.year === year && date.month < month) {\n      return true;\n    }\n\n    if (date.year === year && date.month === month && date.day < day) {\n      return true;\n    }\n\n    return false;\n  });\n\n  if (idx === -1) {\n    return ERA_START_DATES.length - 1;\n  }\n\n  if (idx === 0) {\n    return 0;\n  }\n\n  return idx - 1;\n}\n\nfunction toGregorian(date: AnyCalendarDate) {\n  let eraAddend = ERA_ADDENDS[ERA_NAMES.indexOf(date.era)];\n  if (!eraAddend) {\n    throw new Error('Unknown era: ' + date.era);\n  }\n\n  return new CalendarDate(\n    date.year + eraAddend,\n    date.month,\n    date.day\n  );\n}\n\n/**\n * The Japanese calendar is based on the Gregorian calendar, but with eras for the reign of each Japanese emperor.\n * Whenever a new emperor ascends to the throne, a new era begins and the year starts again from 1.\n * Note that eras before 1868 (Gregorian) are not currently supported by this implementation.\n */\nexport class JapaneseCalendar extends GregorianCalendar {\n  identifier = 'japanese';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let date = super.fromJulianDay(jd);\n    let era = findEraFromGregorianDate(date);\n\n    return new CalendarDate(\n      this,\n      ERA_NAMES[era],\n      date.year - ERA_ADDENDS[era],\n      date.month,\n      date.day\n    );\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return super.toJulianDay(toGregorian(date));\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    let gregorianDate = toGregorian(date);\n    let era = findEraFromGregorianDate(gregorianDate);\n\n    if (ERA_NAMES[era] !== date.era) {\n      date.era = ERA_NAMES[era];\n      date.year = gregorianDate.year - ERA_ADDENDS[era];\n    }\n\n    // Constrain in case we went before the first supported era.\n    this.constrainDate(date);\n  }\n\n  constrainDate(date: Mutable<AnyCalendarDate>) {\n    let idx = ERA_NAMES.indexOf(date.era);\n    let end = ERA_END_DATES[idx];\n    if (end != null) {\n      let [endYear, endMonth, endDay] = end;\n\n      // Constrain the year to the maximum possible value in the era.\n      // Then constrain the month and day fields within that.\n      let maxYear = endYear - ERA_ADDENDS[idx];\n      date.year = Math.max(1, Math.min(maxYear, date.year));\n      if (date.year === maxYear) {\n        date.month = Math.min(endMonth, date.month);\n\n        if (date.month === endMonth) {\n          date.day = Math.min(endDay, date.day);\n        }\n      }\n\n      if (date.year === 1) {\n        let [, startMonth, startDay] = ERA_START_DATES[idx];\n        date.month = Math.max(startMonth, date.month);\n\n        if (date.month === startMonth) {\n          date.day = Math.max(startDay, date.day);\n        }\n      }\n    }\n  }\n\n  getEras() {\n    return ERA_NAMES;\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    // Get the number of years in the era, taking into account the date's month and day fields.\n    let era = ERA_NAMES.indexOf(date.era);\n    let next = ERA_START_DATES[era + 1];\n    if (next == null) {\n      return 9999;\n    }\n\n    let cur = ERA_START_DATES[era];\n    let years = next[0] - cur[0];\n\n    if (date.month < next[1] || (date.month === next[1] && date.day < next[2])) {\n      years++;\n    }\n\n    return years;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return super.getDaysInMonth(toGregorian(date));\n  }\n\n  getMinimumMonthInYear(date: AnyCalendarDate): number {\n    let start = getMinimums(date);\n    return start ? start[1] : 1;\n  }\n\n  getMinimumDayInMonth(date: AnyCalendarDate): number {\n    let start = getMinimums(date);\n    return start && date.month === start[1] ? start[2] : 1;\n  }\n}\n\nfunction getMinimums(date: AnyCalendarDate) {\n  if (date.year === 1) {\n    let idx = ERA_NAMES.indexOf(date.era);\n    return ERA_START_DATES[idx];\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {fromExtendedYear, getExtendedYear, GregorianCalendar} from './GregorianCalendar';\n\nconst BUDDHIST_ERA_START = -543;\n\n/**\n * The Buddhist calendar is the same as the Gregorian calendar, but counts years\n * starting from the birth of Buddha in 543 BC (Gregorian). It supports only one\n * era, identified as 'BE'.\n */\nexport class BuddhistCalendar extends GregorianCalendar {\n  identifier = 'buddhist';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let gregorianDate = super.fromJulianDay(jd);\n    let year = getExtendedYear(gregorianDate.era, gregorianDate.year);\n    return new CalendarDate(\n      this,\n      year - BUDDHIST_ERA_START,\n      gregorianDate.month,\n      gregorianDate.day\n    );\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return super.toJulianDay(toGregorian(date));\n  }\n\n  getEras() {\n    return ['BE'];\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return super.getDaysInMonth(toGregorian(date));\n  }\n}\n\nfunction toGregorian(date: AnyCalendarDate) {\n  let [era, year] = fromExtendedYear(date.year + BUDDHIST_ERA_START);\n  return new CalendarDate(\n    era,\n    year,\n    date.month,\n    date.day\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {fromExtendedYear, getExtendedYear, GregorianCalendar} from './GregorianCalendar';\nimport {Mutable} from '../utils';\n\nconst TAIWAN_ERA_START = 1911;\n\nfunction gregorianYear(date: AnyCalendarDate) {\n  return date.era === 'minguo'\n    ? date.year + TAIWAN_ERA_START\n    : 1 - date.year + TAIWAN_ERA_START;\n}\n\nfunction gregorianToTaiwan(year: number): [string, number] {\n  let y = year - TAIWAN_ERA_START;\n  if (y > 0) {\n    return ['minguo', y];\n  } else {\n    return ['before_minguo', 1 - y];\n  }\n}\n\n/**\n * The Taiwanese calendar is the same as the Gregorian calendar, but years\n * are numbered starting from 1912 (Gregorian). Two eras are supported:\n * 'before_minguo' and 'minguo'.\n */\nexport class TaiwanCalendar extends GregorianCalendar {\n  identifier = 'roc'; // Republic of China\n\n  fromJulianDay(jd: number): CalendarDate {\n    let date = super.fromJulianDay(jd);\n    let extendedYear = getExtendedYear(date.era, date.year);\n    let [era, year] = gregorianToTaiwan(extendedYear);\n    return new CalendarDate(this, era, year, date.month, date.day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return super.toJulianDay(toGregorian(date));\n  }\n\n  getEras() {\n    return ['before_minguo', 'minguo'];\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    let [era, year] = gregorianToTaiwan(gregorianYear(date));\n    date.era = era;\n    date.year = year;\n  }\n\n  getYearsToAdd(date: Mutable<AnyCalendarDate>, years: number) {\n    return date.era === 'before_minguo' ? -years : years;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return super.getDaysInMonth(toGregorian(date));\n  }\n}\n\nfunction toGregorian(date: AnyCalendarDate) {\n  let [era, year] = fromExtendedYear(gregorianYear(date));\n  return new CalendarDate(\n    era,\n    year,\n    date.month,\n    date.day\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod} from '../utils';\n\nconst PERSIAN_EPOCH = 1948321; // 622/03/19 Julian C.E.\n\nfunction isLeapYear(year: number): boolean {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = mod(y0, 2820) + 474;\n\n  return mod((y1 + 38) * 31, 128) < 31;\n}\n\nfunction persianToJulianDay(year: number, month: number, day: number): number {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = mod(y0, 2820) + 474;\n  let offset = month <= 7 ? 31 * (month - 1) : 30 * (month - 1) + 6;\n\n  return (\n    PERSIAN_EPOCH -\n    1 +\n    1029983 * Math.floor(y0 / 2820) +\n    365 * (y1 - 1) +\n    Math.floor((31 * y1 - 5) / 128) +\n    offset +\n    day\n  );\n}\n\n/**\n * The Persian calendar is the main calendar used in Iran and Afghanistan. It has 12 months\n * in each year, the first 6 of which have 31 days, and the next 5 have 30 days. The 12th month\n * has either 29 or 30 days depending on whether it is a leap year. The Persian year starts\n * around the March equinox.\n */\nexport class PersianCalendar implements Calendar {\n  identifier = 'persian';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let d0 = jd - persianToJulianDay(475, 1, 1);\n    let n2820 = Math.floor(d0 / 1029983);\n    let d1 = mod(d0, 1029983);\n    let y2820 = d1 === 1029982 ? 2820 : Math.floor((128 * d1 + 46878) / 46751);\n    let year = 474 + 2820 * n2820 + y2820;\n    if (year <= 0) {\n      year--;\n    }\n\n    let yDay = jd - persianToJulianDay(year, 1, 1) + 1;\n    let month = yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 31);\n    let day = jd - persianToJulianDay(year, month, 1) + 1;\n\n    return new CalendarDate(this, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    return persianToJulianDay(date.year, date.month, date.day);\n  }\n\n  getMonthsInYear(): number {\n    return 12;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.month <= 6) {\n      return 31;\n    }\n\n    if (date.month <= 11) {\n      return 30;\n    }\n\n    return isLeapYear(date.year) ? 30 : 29;\n  }\n\n  getEras() {\n    return ['AP'];\n  }\n\n  getYearsInEra(): number {\n    return 9999;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {fromExtendedYear, GregorianCalendar, gregorianToJulianDay, isLeapYear} from './GregorianCalendar';\n\n// Starts in 78 AD,\nconst INDIAN_ERA_START = 78;\n\n// The Indian year starts 80 days later than the Gregorian year.\nconst INDIAN_YEAR_START = 80;\n\n/**\n * The Indian National Calendar is similar to the Gregorian calendar, but with\n * years numbered since the Saka era in 78 AD (Gregorian). There are 12 months\n * in each year, with either 30 or 31 days. Only one era identifier is supported: 'saka'.\n */\nexport class IndianCalendar extends GregorianCalendar {\n  identifier = 'indian';\n\n  fromJulianDay(jd: number): CalendarDate {\n    // Gregorian date for Julian day\n    let date = super.fromJulianDay(jd);\n\n    // Year in Saka era\n    let indianYear = date.year - INDIAN_ERA_START;\n\n    // Day number in Gregorian year (starting from 0)\n    let yDay = jd - gregorianToJulianDay(date.era, date.year, 1, 1);\n\n    let leapMonth: number;\n    if (yDay < INDIAN_YEAR_START) {\n      //  Day is at the end of the preceding Saka year\n      indianYear--;\n\n      // Days in leapMonth this year, previous Gregorian year\n      leapMonth = isLeapYear(date.year - 1) ? 31 : 30;\n      yDay += leapMonth + (31 * 5) + (30 * 3) + 10;\n    } else {\n      // Days in leapMonth this year\n      leapMonth = isLeapYear(date.year) ? 31 : 30;\n      yDay -= INDIAN_YEAR_START;\n    }\n\n    let indianMonth: number;\n    let indianDay: number;\n    if (yDay < leapMonth) {\n      indianMonth = 1;\n      indianDay = yDay + 1;\n    } else {\n      let mDay = yDay - leapMonth;\n      if (mDay < (31 * 5)) {\n        indianMonth = Math.floor(mDay / 31) + 2;\n        indianDay = (mDay % 31) + 1;\n      } else {\n        mDay -= 31 * 5;\n        indianMonth = Math.floor(mDay / 30) + 7;\n        indianDay = (mDay % 30) + 1;\n      }\n    }\n\n    return new CalendarDate(this, indianYear, indianMonth, indianDay);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let extendedYear = date.year + INDIAN_ERA_START;\n    let [era, year] = fromExtendedYear(extendedYear);\n\n    let leapMonth: number;\n    let jd: number;\n    if (isLeapYear(year)) {\n      leapMonth = 31;\n      jd = gregorianToJulianDay(era, year, 3, 21);\n    } else {\n      leapMonth = 30;\n      jd = gregorianToJulianDay(era, year, 3, 22);\n    }\n\n    if (date.month === 1) {\n      return jd + date.day - 1;\n    }\n\n    jd += leapMonth + Math.min(date.month - 2, 5) * 31;\n\n    if (date.month >= 8) {\n      jd += (date.month - 7) * 30;\n    }\n\n    jd += date.day - 1;\n    return jd;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.month === 1 && isLeapYear(date.year + INDIAN_ERA_START)) {\n      return 31;\n    }\n\n    if (date.month >= 2 && date.month <= 6) {\n      return 31;\n    }\n\n    return 30;\n  }\n\n  getYearsInEra(): number {\n    return 9999;\n  }\n\n  getEras() {\n    return ['saka'];\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\n\nconst CIVIL_EPOC = 1948440; // CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)\nconst ASTRONOMICAL_EPOC = 1948439; // CE 622 July 15 Thursday (Julian calendar)\nconst UMALQURA_YEAR_START = 1300;\nconst UMALQURA_YEAR_END = 1600;\nconst UMALQURA_START_DAYS = 460322;\n\nfunction islamicToJulianDay(epoch: number, year: number, month: number, day: number): number {\n  return day +\n    Math.ceil(29.5 * (month - 1)) +\n    (year - 1) * 354 +\n    Math.floor((3 + 11 * year) / 30) +\n    epoch - 1;\n}\n\nfunction julianDayToIslamic(calendar: Calendar, epoch: number, jd: number) {\n  let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);\n  let month = Math.min(12, Math.ceil((jd - (29 + islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);\n  let day = jd - islamicToJulianDay(epoch, year, month, 1) + 1;\n\n  return new CalendarDate(calendar, year, month, day);\n}\n\nfunction isLeapYear(year: number): boolean {\n  return (14 + 11 * year) % 30 < 11;\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The civil variant uses simple arithmetic rules rather than astronomical calculations to approximate\n * the traditional calendar, which is based on sighting of the crescent moon. It uses Friday, July 16 622 CE (Julian) as the epoch.\n * Each year has 12 months, with either 354 or 355 days depending on whether it is a leap year.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicCivilCalendar implements Calendar {\n  identifier = 'islamic-civil';\n\n  fromJulianDay(jd: number): CalendarDate {\n    return julianDayToIslamic(this, CIVIL_EPOC, jd);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return islamicToJulianDay(CIVIL_EPOC, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    let length = 29 + date.month % 2;\n    if (date.month === 12 && isLeapYear(date.year)) {\n      length++;\n    }\n\n    return length;\n  }\n\n  getMonthsInYear(): number {\n    return 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 355 : 354;\n  }\n\n  getYearsInEra(): number {\n    return 9999;\n  }\n\n  getEras() {\n    return ['AH'];\n  }\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The tabular variant uses simple arithmetic rules rather than astronomical calculations to approximate\n * the traditional calendar, which is based on sighting of the crescent moon. It uses Thursday, July 15 622 CE (Julian) as the epoch.\n * Each year has 12 months, with either 354 or 355 days depending on whether it is a leap year.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicTabularCalendar extends IslamicCivilCalendar {\n  identifier = 'islamic-tbla';\n\n  fromJulianDay(jd: number): CalendarDate {\n    return julianDayToIslamic(this, ASTRONOMICAL_EPOC, jd);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return islamicToJulianDay(ASTRONOMICAL_EPOC, date.year, date.month, date.day);\n  }\n}\n\n// Generated by scripts/generate-umalqura.js\nconst UMALQURA_DATA = 'qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=';\nlet UMALQURA_MONTHLENGTH: Uint16Array;\nlet UMALQURA_YEAR_START_TABLE: Uint32Array;\n\nfunction umalquraYearStart(year: number): number {\n  return UMALQURA_START_DAYS + UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START];\n}\n\nfunction umalquraMonthLength(year: number, month: number): number {\n  let idx = (year - UMALQURA_YEAR_START);\n  let mask = (0x01 << (11 - (month - 1)));\n  if ((UMALQURA_MONTHLENGTH[idx] & mask) === 0) {\n    return 29;\n  } else {\n    return 30;\n  }\n}\n\nfunction umalquraMonthStart(year: number, month: number): number {\n  let day = umalquraYearStart(year);\n  for (let i = 1; i < month; i++) {\n    day += umalquraMonthLength(year, i);\n  }\n  return day;\n}\n\nfunction umalquraYearLength(year: number): number {\n  return UMALQURA_YEAR_START_TABLE[year + 1 - UMALQURA_YEAR_START] - UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START];\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The Umalqura variant is primarily used in Saudi Arabia. It is a lunar calendar, based on astronomical\n * calculations that predict the sighting of a crescent moon. Month and year lengths vary between years\n * depending on these calculations.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicUmalquraCalendar extends IslamicCivilCalendar {\n  identifier = 'islamic-umalqura';\n\n  constructor() {\n    super();\n    if (!UMALQURA_MONTHLENGTH) {\n      UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob(UMALQURA_DATA), c => c.charCodeAt(0)).buffer);\n    }\n\n    if (!UMALQURA_YEAR_START_TABLE) {\n      UMALQURA_YEAR_START_TABLE = new Uint32Array(UMALQURA_YEAR_END - UMALQURA_YEAR_START + 1);\n\n      let yearStart = 0;\n      for (let year = UMALQURA_YEAR_START; year <= UMALQURA_YEAR_END; year++) {\n        UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START] = yearStart;\n        for (let i = 1; i <= 12; i++) {\n          yearStart += umalquraMonthLength(year, i);\n        }\n      }\n    }\n  }\n\n  fromJulianDay(jd: number): CalendarDate {\n    let days = jd - CIVIL_EPOC;\n    let startDays = umalquraYearStart(UMALQURA_YEAR_START);\n    let endDays = umalquraYearStart(UMALQURA_YEAR_END);\n    if (days < startDays || days > endDays) {\n      return super.fromJulianDay(jd);\n    } else {\n      let y = UMALQURA_YEAR_START - 1;\n      let m = 1;\n      let d = 1;\n      while (d > 0) {\n        y++;\n        d = days - umalquraYearStart(y) + 1;\n        let yearLength = umalquraYearLength(y);\n        if (d === yearLength) {\n          m = 12;\n          break;\n        } else if (d < yearLength) {\n          let monthLength = umalquraMonthLength(y, m);\n          m = 1;\n          while (d > monthLength) {\n            d -= monthLength;\n            m++;\n            monthLength = umalquraMonthLength(y, m);\n          }\n          break;\n        }\n      }\n\n      return new CalendarDate(this, y, m, (days - umalquraMonthStart(y, m) + 1));\n    }\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.toJulianDay(date);\n    }\n\n    return CIVIL_EPOC + umalquraMonthStart(date.year, date.month) + (date.day - 1);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.getDaysInMonth(date);\n    }\n\n    return umalquraMonthLength(date.year, date.month);\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.getDaysInYear(date);\n    }\n\n    return umalquraYearLength(date.year);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod, Mutable} from '../utils';\n\nconst HEBREW_EPOCH = 347997;\n\n// Hebrew date calculations are performed in terms of days, hours, and\n// \"parts\" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.\nconst HOUR_PARTS = 1080;\nconst DAY_PARTS  = 24 * HOUR_PARTS;\n\n// An approximate value for the length of a lunar month.\n// It is used to calculate the approximate year and month of a given\n// absolute date.\nconst MONTH_DAYS = 29;\nconst MONTH_FRACT = 12 * HOUR_PARTS + 793;\nconst MONTH_PARTS = MONTH_DAYS * DAY_PARTS + MONTH_FRACT;\n\nfunction isLeapYear(year: number) {\n  return mod(year * 7 + 1, 19) < 7;\n}\n\n// Test for delay of start of new year and to avoid\n// Sunday, Wednesday, and Friday as start of the new year.\nfunction hebrewDelay1(year: number) {\n  let months = Math.floor((235 * year - 234) / 19);\n  let parts = 12084 + 13753 * months;\n  let day = months * 29 + Math.floor(parts / 25920);\n\n  if (mod(3 * (day + 1), 7) < 3) {\n    day += 1;\n  }\n\n  return day;\n}\n\n// Check for delay in start of new year due to length of adjacent years\nfunction hebrewDelay2(year: number) {\n  let last = hebrewDelay1(year - 1);\n  let present = hebrewDelay1(year);\n  let next = hebrewDelay1(year + 1);\n\n  if (next - present === 356) {\n    return 2;\n  }\n\n  if (present - last === 382) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction startOfYear(year: number) {\n  return hebrewDelay1(year) + hebrewDelay2(year);\n}\n\nfunction getDaysInYear(year: number) {\n  return startOfYear(year + 1) - startOfYear(year);\n}\n\nfunction getYearType(year: number) {\n  let yearLength = getDaysInYear(year);\n\n  if (yearLength > 380) {\n    yearLength -= 30; // Subtract length of leap month.\n  }\n\n  switch (yearLength) {\n    case 353:\n      return 0; // deficient\n    case 354:\n      return 1; // normal\n    case 355:\n      return 2; // complete\n  }\n}\n\nfunction getDaysInMonth(year: number, month: number): number {\n  // Normalize month numbers from 1 - 13, even on non-leap years\n  if (month >= 6 && !isLeapYear(year)) {\n    month++;\n  }\n\n  // First of all, dispose of fixed-length 29 day months\n  if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) {\n    return 29;\n  }\n\n  let yearType = getYearType(year);\n\n  // If it's Heshvan, days depend on length of year\n  if (month === 2) {\n    return yearType === 2 ? 30 : 29;\n  }\n\n  // Similarly, Kislev varies with the length of year\n  if (month === 3) {\n    return yearType === 0 ? 29 : 30;\n  }\n\n  // Adar I only exists in leap years\n  if (month === 6) {\n    return isLeapYear(year) ? 30 : 0;\n  }\n\n  return 30;\n}\n\n/**\n * The Hebrew calendar is used in Israel and around the world by the Jewish faith.\n * Years include either 12 or 13 months depending on whether it is a leap year.\n * In leap years, an extra month is inserted at month 6.\n */\nexport class HebrewCalendar implements Calendar {\n  identifier = 'hebrew';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let d = jd - HEBREW_EPOCH;\n    let m = (d * DAY_PARTS) / MONTH_PARTS;           // Months (approx)\n    let year = Math.floor((19 * m + 234) / 235) + 1; // Years (approx)\n    let ys = startOfYear(year);                      // 1st day of year\n    let dayOfYear = Math.floor(d - ys);\n\n    // Because of the postponement rules, it's possible to guess wrong.  Fix it.\n    while (dayOfYear < 1) {\n      year--;\n      ys = startOfYear(year);\n      dayOfYear = Math.floor(d - ys);\n    }\n\n    // Now figure out which month we're in, and the date within that month\n    let month = 1;\n    let monthStart = 0;\n    while (monthStart < dayOfYear) {\n      monthStart += getDaysInMonth(year, month);\n      month++;\n    }\n\n    month--;\n    monthStart -= getDaysInMonth(year, month);\n\n    let day = dayOfYear - monthStart;\n    return new CalendarDate(this, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let jd = startOfYear(date.year);\n    for (let month = 1; month < date.month; month++) {\n      jd += getDaysInMonth(date.year, month);\n    }\n\n    return jd + date.day + HEBREW_EPOCH;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return getDaysInMonth(date.year, date.month);\n  }\n\n  getMonthsInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 13 : 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return getDaysInYear(date.year);\n  }\n\n  getYearsInEra(): number {\n    return 9999;\n  }\n\n  getEras() {\n    return ['AM'];\n  }\n\n  balanceYearMonth(date: Mutable<AnyCalendarDate>, previousDate: AnyCalendarDate) {\n    // Keep date in the same month when switching between leap years and non leap years\n    if (previousDate.year !== date.year) {\n      if (isLeapYear(previousDate.year) && !isLeapYear(date.year) && previousDate.month > 6) {\n        date.month--;\n      } else if (!isLeapYear(previousDate.year) && isLeapYear(date.year) && previousDate.month > 6) {\n        date.month++;\n      }\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {Mutable} from '../utils';\n\nconst ETHIOPIC_EPOCH = 1723856;\nconst COPTIC_EPOCH = 1824665;\n\n// The delta between Amete Alem 1 and Amete Mihret 1\n// AA 5501 = AM 1\nconst AMETE_MIHRET_DELTA = 5500;\n\nfunction ceToJulianDay(epoch: number, year: number, month: number, day: number): number {\n  return (\n    epoch                   // difference from Julian epoch to 1,1,1\n    + 365 * year            // number of days from years\n    + Math.floor(year / 4)  // extra day of leap year\n    + 30 * (month - 1)      // number of days from months (1 based)\n    + day - 1               // number of days for present month (1 based)\n  );\n}\n\nfunction julianDayToCE(calendar: Calendar, epoch: number, jd: number): Mutable<CalendarDate> {\n  let year = Math.floor((4 * (jd - epoch)) / 1461);\n  let month = 1 + Math.floor((jd - ceToJulianDay(epoch, year, 1, 1)) / 30);\n  let day = jd + 1 - ceToJulianDay(epoch, year, month, 1);\n\n  return new CalendarDate(calendar, year, month, day);\n}\n\nfunction getLeapDay(year: number) {\n  return Math.floor((year % 4) / 3);\n}\n\nfunction getDaysInMonth(year: number, month: number) {\n  // The Ethiopian and Coptic calendars have 13 months, 12 of 30 days each and\n  // an intercalary month at the end of the year of 5 or 6 days, depending whether\n  // the year is a leap year or not. The Leap Year follows the same rules as the\n  // Julian Calendar so that the extra month always has six days in the year before\n  // a Julian Leap Year.\n  if (month % 13 !== 0) {\n    // not intercalary month\n    return 30;\n  } else {\n    // intercalary month 5 days + possible leap day\n    return getLeapDay(year) + 5;\n  }\n}\n\n/**\n * The Ethiopic calendar system is the official calendar used in Ethiopia.\n * It includes 12 months of 30 days each, plus 5 or 6 intercalary days depending\n * on whether it is a leap year. Two eras are supported: 'AA' and 'AM'.\n */\nexport class EthiopicCalendar implements Calendar {\n  identifier = 'ethiopic';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let date = julianDayToCE(this, ETHIOPIC_EPOCH, jd);\n    if (date.year > 0) {\n      date.era = 'AM';\n    } else {\n      date.era = 'AA';\n      date.year += AMETE_MIHRET_DELTA;\n    }\n\n    return date as CalendarDate;\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let year = date.year;\n    if (date.era === 'AA') {\n      year -= AMETE_MIHRET_DELTA;\n    }\n\n    return ceToJulianDay(ETHIOPIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    let year = date.year;\n    if (date.era === 'AA') {\n      year -= AMETE_MIHRET_DELTA;\n    }\n\n    return getDaysInMonth(year, date.month);\n  }\n\n  getMonthsInYear(): number {\n    return 13;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return 365 + getLeapDay(date.year);\n  }\n\n  getYearsInEra(): number {\n    return 9999;\n  }\n\n  getEras() {\n    return ['AA', 'AM'];\n  }\n}\n\n/**\n * The Ethiopic (Amete Alem) calendar is the same as the modern Ethiopic calendar,\n * except years were measured from a different epoch. Only one era is supported: 'AA'.\n */\nexport class EthiopicAmeteAlemCalendar extends EthiopicCalendar {\n  identifier = 'ethioaa'; // also known as 'ethiopic-amete-alem' in ICU\n\n  fromJulianDay(jd: number): CalendarDate {\n    let date = julianDayToCE(this, ETHIOPIC_EPOCH, jd);\n    date.era = 'AA';\n    date.year += AMETE_MIHRET_DELTA;\n    return date as CalendarDate;\n  }\n\n  getEras() {\n    return ['AA'];\n  }\n}\n\n/**\n * The Coptic calendar is similar to the Ethiopic calendar.\n * It includes 12 months of 30 days each, plus 5 or 6 intercalary days depending\n * on whether it is a leap year. Two eras are supported: 'BCE' and 'CE'.\n */\nexport class CopticCalendar extends EthiopicCalendar {\n  identifier = 'coptic';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let date = julianDayToCE(this, COPTIC_EPOCH, jd);\n    if (date.year <= 0) {\n      date.era = 'BCE';\n      date.year = 1 - date.year;\n    } else {\n      date.era = 'CE';\n    }\n\n    return date as CalendarDate;\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let year = date.year;\n    if (date.era === 'BCE') {\n      year = 1 - year;\n    }\n\n    return ceToJulianDay(COPTIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    let year = date.year;\n    if (date.era === 'BCE') {\n      year = 1 - year;\n    }\n\n    return getDaysInMonth(year, date.month);\n  }\n\n  getYearsToAdd(date: Mutable<AnyCalendarDate>, years: number) {\n    return date.era === 'BCE' ? -years : years;\n  }\n\n  getEras() {\n    return ['BCE', 'CE'];\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BuddhistCalendar} from './calendars/BuddhistCalendar';\nimport {Calendar} from './types';\nimport {CopticCalendar, EthiopicAmeteAlemCalendar, EthiopicCalendar} from './calendars/EthiopicCalendar';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {HebrewCalendar} from './calendars/HebrewCalendar';\nimport {IndianCalendar} from './calendars/IndianCalendar';\nimport {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';\nimport {JapaneseCalendar} from './calendars/JapaneseCalendar';\nimport {PersianCalendar} from './calendars/PersianCalendar';\nimport {TaiwanCalendar} from './calendars/TaiwanCalendar';\n\n/** Creates a `Calendar` instance from a Unicode calendar identifier string. */\nexport function createCalendar(name: string): Calendar {\n  switch (name) {\n    case 'buddhist':\n      return new BuddhistCalendar();\n    case 'ethiopic':\n      return new EthiopicCalendar();\n    case 'ethioaa':\n      return new EthiopicAmeteAlemCalendar();\n    case 'coptic':\n      return new CopticCalendar();\n    case 'hebrew':\n      return new HebrewCalendar();\n    case 'indian':\n      return new IndianCalendar();\n    case 'islamic-civil':\n      return new IslamicCivilCalendar();\n    case 'islamic-tbla':\n      return new IslamicTabularCalendar();\n    case 'islamic-umalqura':\n      return new IslamicUmalquraCalendar();\n    case 'japanese':\n      return new JapaneseCalendar();\n    case 'persian':\n      return new PersianCalendar();\n    case 'roc':\n      return new TaiwanCalendar();\n    case 'gregory':\n    default:\n      return new GregorianCalendar();\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet formatterCache = new Map<string, Intl.DateTimeFormat>();\n\ninterface ResolvedDateTimeFormatOptions extends Intl.ResolvedDateTimeFormatOptions {\n  hourCycle?: Intl.DateTimeFormatOptions['hourCycle']\n}\n\ninterface DateRangeFormatPart extends Intl.DateTimeFormatPart {\n  source: 'startRange' | 'endRange' | 'shared'\n}\n\n/** A wrapper around Intl.DateTimeFormat that fixes various browser bugs, and polyfills new features. */\nexport class DateFormatter implements Intl.DateTimeFormat {\n  private formatter: Intl.DateTimeFormat;\n  private options: Intl.DateTimeFormatOptions;\n  private resolvedHourCycle: Intl.DateTimeFormatOptions['hourCycle'];\n\n  constructor(locale: string, options: Intl.DateTimeFormatOptions = {}) {\n    this.formatter = getCachedDateFormatter(locale, options);\n    this.options = options;\n  }\n\n  /** Formats a date as a string according to the locale and format options passed to the constructor. */\n  format(value: Date): string {\n    return this.formatter.format(value);\n  }\n\n  /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */\n  formatToParts(value: Date): Intl.DateTimeFormatPart[] {\n    return this.formatter.formatToParts(value);\n  }\n\n  /** Formats a date range as a string. */\n  formatRange(start: Date, end: Date): string {\n    // @ts-ignore\n    if (typeof this.formatter.formatRange === 'function') {\n      // @ts-ignore\n      return this.formatter.formatRange(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    // Very basic fallback for old browsers.\n    return `${this.formatter.format(start)} – ${this.formatter.format(end)}`;\n  }\n\n  /** Formats a date range as an array of parts. */\n  formatRangeToParts(start: Date, end: Date): DateRangeFormatPart[] {\n    // @ts-ignore\n    if (typeof this.formatter.formatRangeToParts === 'function') {\n      // @ts-ignore\n      return this.formatter.formatRangeToParts(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    let startParts = this.formatter.formatToParts(start);\n    let endParts = this.formatter.formatToParts(end);\n    return [\n      ...startParts.map(p => ({...p, source: 'startRange'} as DateRangeFormatPart)),\n      {type: 'literal', value: ' – ', source: 'shared'},\n      ...endParts.map(p => ({...p, source: 'endRange'} as DateRangeFormatPart))\n    ];\n  }\n\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n  resolvedOptions(): ResolvedDateTimeFormatOptions {\n    let resolvedOptions = this.formatter.resolvedOptions() as ResolvedDateTimeFormatOptions;\n    if (hasBuggyResolvedHourCycle()) {\n      if (!this.resolvedHourCycle) {\n        this.resolvedHourCycle = getResolvedHourCycle(resolvedOptions.locale, this.options);\n      }\n      resolvedOptions.hourCycle = this.resolvedHourCycle;\n      resolvedOptions.hour12 = this.resolvedHourCycle === 'h11' || this.resolvedHourCycle === 'h12';\n    }\n\n    return resolvedOptions;\n  }\n}\n\n// There are multiple bugs involving the hour12 and hourCycle options in various browser engines.\n//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)\n//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)\n//     rather than h12 (12:00 - 11:59).\n//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal\n//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]\n// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791\n// [2] https://github.com/tc39/ecma402/issues/402\n// [3] https://bugs.webkit.org/show_bug.cgi?id=229313\n\n// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802\nconst hour12Preferences = {\n  true: {\n    // Only Japanese uses the h11 style for 12 hour time. All others use h12.\n    ja: 'h11'\n  },\n  false: {\n    // All locales use h23 for 24 hour time. None use h24.\n  }\n};\n\nfunction getCachedDateFormatter(locale: string, options: Intl.DateTimeFormatOptions = {}): Intl.DateTimeFormat {\n  // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.\n  // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.\n  if (typeof options.hour12 === 'boolean' && hasBuggyHour12Behavior()) {\n    options = {...options};\n    let pref = hour12Preferences[String(options.hour12)][locale.split('-')[0]];\n    let defaultHourCycle = options.hour12 ? 'h12' : 'h23';\n    options.hourCycle = pref ?? defaultHourCycle;\n    delete options.hour12;\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey);\n  }\n\n  let numberFormatter = new Intl.DateTimeFormat(locale, options);\n  formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\nlet _hasBuggyHour12Behavior: boolean = null;\nfunction hasBuggyHour12Behavior() {\n  if (_hasBuggyHour12Behavior == null) {\n    _hasBuggyHour12Behavior = new Intl.DateTimeFormat('en-US', {\n      hour: 'numeric',\n      hour12: false\n    }).format(new Date(2020, 2, 3, 0)) === '24';\n  }\n\n  return _hasBuggyHour12Behavior;\n}\n\nlet _hasBuggyResolvedHourCycle: boolean = null;\nfunction hasBuggyResolvedHourCycle() {\n  if (_hasBuggyResolvedHourCycle == null) {\n    _hasBuggyResolvedHourCycle = (new Intl.DateTimeFormat('fr', {\n      hour: 'numeric',\n      hour12: false\n    }).resolvedOptions() as ResolvedDateTimeFormatOptions).hourCycle === 'h12';\n  }\n\n  return _hasBuggyResolvedHourCycle;\n}\n\nfunction getResolvedHourCycle(locale: string, options: Intl.DateTimeFormatOptions) {\n  if (!options.timeStyle && !options.hour) {\n    return undefined;\n  }\n\n  // Work around buggy results in resolved hourCycle and hour12 options in WebKit.\n  // Format the minimum possible hour and maximum possible hour in a day and parse the results.\n  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, '');\n  locale += (locale.includes('-u-') ? '' : '-u') + '-nu-latn';\n  let formatter = getCachedDateFormatter(locale, {\n    ...options,\n    timeZone: undefined // use local timezone\n  });\n\n  let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find(p => p.type === 'hour').value, 10);\n  let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find(p => p.type === 'hour').value, 10);\n\n  if (min === 0 && max === 23) {\n    return 'h23';\n  }\n\n  if (min === 24 && max === 23) {\n    return 'h24';\n  }\n\n  if (min === 0 && max === 11) {\n    return 'h11';\n  }\n\n  if (min === 12 && max === 11) {\n    return 'h12';\n  }\n\n  throw new Error('Unexpected hour cycle result');\n}\n"]},"metadata":{},"sourceType":"module"}